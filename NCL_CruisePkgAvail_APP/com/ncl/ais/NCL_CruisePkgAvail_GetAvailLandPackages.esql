BROKER SCHEMA com.ncl.ais


CREATE COMPUTE MODULE NCL_CruisePkgAvail_GetAvailLandPackages
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
			
		DECLARE rEnv, rOutResp REFERENCE TO Environment.Variables;
		DECLARE rEnvInMsg REFERENCE TO rEnv.Temp.Message.NCL_CruisePkgAvailRQ;
		DECLARE rOutRoot REFERENCE TO rEnv.errors;
		DECLARE rIn REFERENCE TO InputRoot.XMLNSC.UpdateBooking_OUT;
		DECLARE bFatalError BOOLEAN FALSE;
		DECLARE rError REFERENCE TO rIn.Errors.Error[1];
		Set rEnv.Errors=rIn.Errors;
		WHILE LASTMOVE(rError) AND (NOT bFatalError) DO
			IF rError.ErrorSeverity = 'F' OR rError.ErrorSeverity = 'OPERATION'
			THEN
				SET bFatalError = TRUE;
			END IF;		
			MOVE rError NEXTSIBLING;
		END WHILE;
		
		IF bFatalError = TRUE 
		THEN
			CALL com.ncl.iib.log.AddLogEvent(NodeLabel, 'UpdateBooking API Returned Errors ...', rEnv);
			CALL CopyEntireMessage();
			
			PROPAGATE TO LABEL 'GENERIC_WARN';
			RETURN FALSE;
		END IF;
		IF EXISTS(rIn.Errors.Error[]) THEN
			CALL StoreErrorsAsWarnings(rIn.Errors, rEnvInMsg, rEnv, rOutRoot);
		END IF;
		-- set the endpoint of the VX server
		SET OutputRoot.HTTPRequestHeader."x-upstream" = rEnv.endPoint;
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS rOutResp IDENTITY GetAvailLandPackages_IN;
		SET Environment.Variables.Temp.Message.UpdateBooking_OUT=InputRoot.XMLNSC.UpdateBooking_OUT;
		DECLARE updateOut REFERENCE TO Environment.Variables.Temp.Message.UpdateBooking_OUT;
		IF EXISTS(updateOut.ResShell.ResHeader.ResID[]) THEN
			-- save frequently used elements in environment tree
			SET rEnv.Temp.ReservationId = rIn.*:ReservationID.(XMLNSC.Attribute)ID;
		END IF;
		CALL com.ncl.ais.utils.CreateVersonixHeader(rEnv.Temp.SessionId,rOutResp);
		SET rOutResp.SearchOptions.IncludeComponents='Y';
		SET rOutResp.ResShellRef=updateOut.ResShell.ResHeader.ResID;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
