BROKER SCHEMA com.ncl.ais


CREATE COMPUTE MODULE NCL_AttachIndAir_StoreBkg
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE rEnv,rOutResp REFERENCE TO Environment.Variables;
		
		DECLARE rEnvIn REFERENCE TO rEnv.InputMsg.XMLNSC.*:NCL_CruiseAttachIndependentAirRQ;
		DECLARE rUpdBkgOut REFERENCE TO InputRoot.XMLNSC.*:UpdateBooking_OUT;
		IF ((EXISTS (rUpdBkgOut.Errors.Error[])) AND (
												rUpdBkgOut.Errors.Error.ErrorSeverity='ERROR' OR
												rUpdBkgOut.Errors.Error.ErrorSeverity='FATAL' OR
												rUpdBkgOut.Errors.Error.ErrorSeverity='EXCEPTION' OR
												EXISTS(rUpdBkgOut.Errors.Error.ErrorMessage[]))) 
		THEN						
			CALL CopyEntireMessage();
						
			PROPAGATE TO LABEL 'UPDBKG_ERROR';
			RETURN FALSE;
		END IF;
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
	    CREATE LASTCHILD OF OutputRoot.XMLNSC AS rOutResp IDENTITY StoreBooking_IN;
	    CALL com.ncl.ais.utils.CreateVersonixHeader(rEnv.SessionID,rOutResp);
	    
--	    SET rOutResp.MsgHeader.Version = VersonixAPIVersion;
--	    SET rOutResp.MsgHeader.SessionGUID = rEnv.SessionID;
	    SET rOutResp.ResID = rEnvIn.*:ReservationId;
		

		CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
