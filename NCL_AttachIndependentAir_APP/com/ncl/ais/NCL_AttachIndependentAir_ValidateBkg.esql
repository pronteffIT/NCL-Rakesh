BROKER SCHEMA com.ncl.ais
DECLARE DEFAULT_REPLYQ EXTERNAL CHARACTER 'NCL_CRUISE_RETRIEVE_CLIENT_RESP';
DECLARE MSG_EXPIRY EXTERNAL INTEGER 3000;
DECLARE sc NAMESPACE 'http://nclapi/schemas';
DECLARE vb NAMESPACE 'http://NCL_ValidateBookingLib';
CREATE COMPUTE MODULE NCL_AttachIndependentAir_ValidateBkg
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL CopyMessageHeaders();
		 DECLARE rEnv, rInmsg, rEnvInMsg REFERENCE TO OutputLocalEnvironment;
		 DECLARE rIn REFERENCE TO InputRoot.XMLNSC.*:NCL_CruiseAttachIndependentAirRQ;
		 CREATE FIELD Environment.Variables AS rEnv;
		 DECLARE cLocalTranId CHARACTER COALESCE(InputRoot.MQMD.MsgId, UUIDASCHAR);
				
		 SET cLocalTranId = TRANSLATE(cLocalTranId, 'X''', '');		
		 		
		-- create IIB log event
		CALL com.ncl.iib.log.CreateAuditLogEvent(rEnv, cLocalTranId, '', '');

		-- add metadata to log event
		CALL com.ncl.iib.log.CreateMetaData('ReservationId', rIn.*:ReservationId, 'Reservation Id', rEnv); 
		 
		 
		 -- Backup the MQMD details
		SET Environment.MQMD = InputRoot.MQMD;
		-- Set Message expiry to 1/10th of a second
		SET Environment.MQMD.Expiry = MSG_EXPIRY;
		SET Environment.MQMD.Format = MQFMT_STRING;		
		-- If no Reply To Queue mentioned, default to the queue defined in UDP	
		IF LENGTH(TRIM(InputRoot.MQMD.ReplyToQ)) = 0 
		THEN				
			SET Environment.MQMD.ReplyToQ = DEFAULT_REPLYQ;
		END IF;
		
		CREATE FIELD rEnv.InputMsg as rInmsg;
		CREATE LASTCHILD OF rInmsg DOMAIN('XMLNSC') NAME 'XMLNSC';
		SET rInmsg.XMLNSC = InputRoot.XMLNSC;
		SET OutputRoot.XMLNSC.vb:VerifyAgencyRequest.source = InputRoot.XMLNSC.*:NCL_CruiseAttachIndependentAirRQ.sc:POS.sc:Source;
		 
		 --CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
