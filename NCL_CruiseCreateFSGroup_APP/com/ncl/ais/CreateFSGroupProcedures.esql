BROKER SCHEMA com.ncl.ais

CREATE PROCEDURE CreateWarningResponseForVXErrors(IN messageName CHARACTER, INOUT rEnv REFERENCE, INOUT rOrgMsg REFERENCE, IN rVxError REFERENCE, INOUT rOutRoot REFERENCE)
BEGIN
	DECLARE rOut REFERENCE TO rOutRoot;
	DECLARE rWarn REFERENCE TO rEnv;
	
	DECLARE cCode CHARACTER rVxError.Errors.Error.ErrorCode;
	DECLARE cExternalCodeInfo, cErrorMsg CHARACTER '';
	
	DECLARE WARNMSG ROW;
	
	CREATE LASTCHILD OF WARNMSG DOMAIN('XMLNSC') NAME 'Warnings';
	
	FOR rError AS rVxError.Errors.Error[] DO
		SET cCode = rError.ErrorCode;
		
		CREATE LASTCHILD OF WARNMSG.Warnings AS rWarn NAMESPACE ns NAME 'Warning';
		
		-- get external error code from cache
		SET cExternalCodeInfo = com.ncl.ais.utils.GetExternalCodeFromCache(rEnv.Temp.Channel || '#' || AdvCodeType, cCode, XC10CacheMap, 
																			XC10ConnectionConfig);
																			
		IF COALESCE(cExternalCodeInfo, '') = '' OR STARTSWITH(cExternalCodeInfo, 'ERROR') THEN						
			-- trigger cache loader				-- trigger cache loader
			IF NOT CONTAINS(rEnv.Temp.CacheLoadRequested, AdvCodeType) THEN			
				CREATE LASTCHILD OF rOutRoot DOMAIN('XMLNSC') NAME 'XMLNSC';		
				SET rOutRoot.XMLNSC.CacheMetadata.Channel = rEnv.Temp.Channel;		
				SET rOutRoot.XMLNSC.CacheMetadata.ErrorCodeType = AdvCodeType;		
					
				SET rEnv.Temp.CacheLoadRequested = rEnv.Temp.CacheLoadRequested || AdvCodeType || '#';					
					
				PROPAGATE TO LABEL 'CACHE_LOAD';
			END IF;				
																			
			CALL CreateWarningResponse('', rEnv.Temp.Channel, cCode, AdvCodeType, rError, rWarn);
		ELSE					
			CALL CreateWarningResponse(cExternalCodeInfo, rEnv.Temp.Channel, cCode, AdvCodeType, rError, rWarn);	
		END IF;			
			
		SET cErrorMsg = FIELDVALUE(rError.ErrorMessage);					
	END FOR;

	-- add MQMD
	CREATE LASTCHILD OF rOutRoot DOMAIN('MQMD') NAME 'MQMD';
	SET rOutRoot.MQMD = rEnv.Temp.Headers.MQMD;
	
	-- create response message
	CREATE LASTCHILD OF rOutRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
	CREATE FIELD rOutRoot.XMLNSC.ns:{messageName} AS rOut;
	
	CALL com.ncl.ais.utils.CopyAttributes(rOrgMsg, rOut);
	SET rOut.ns:Warnings = WARNMSG.Warnings;
END;

CREATE PROCEDURE CreateWarningResponse(IN cExternalCodeDetails CHARACTER, IN cChannel CHARACTER, IN cErrorCode CHARACTER, IN cCodeType CHARACTER, 
										IN rVxError REFERENCE, INOUT rWarn REFERENCE) 
BEGIN
	DECLARE cAdvCode, cErrorMsg, cExternalCode CHARACTER '';
	DECLARE defAdvCode CHARACTER '12228';
	DECLARE defErrorMsg CHARACTER 'System error from backend Try Later';
	
	SET cExternalCode = cExternalCodeDetails;
	
	IF cExternalCode = '' THEN		
		IF (cErrorCode = '' OR cChannel = '') THEN
			SET cAdvCode = defAdvCode;
			SET cErrorMsg = defErrorMsg;
		ELSE
			SET cExternalCode = com.ncl.ais.utils.LookupExternalCodeUsingSWCode(cChannel, cErrorCode, cCodeType);
			
			SET cAdvCode = SUBSTRING(cExternalCode BEFORE '#1#');
			SET cErrorMsg = SUBSTRING(SUBSTRING(cExternalCode AFTER '#1#') BEFORE '#2#');
		END IF;
	ELSE
		SET cAdvCode = SUBSTRING(cExternalCode BEFORE '#1#');
		SET cErrorMsg = SUBSTRING(SUBSTRING(cExternalCode AFTER '#1#') BEFORE '#2#');
	END IF;
		
	IF COALESCE(cAdvCode, '') = '' THEN
		SET rWarn.(XMLNSC.Attribute)Code = defAdvCode;
		SET rWarn.(XMLNSC.Attribute)ShortText = SUBSTRING(defErrorMsg FROM 1 FOR 64);
	ELSE
		SET rWarn.(XMLNSC.Attribute)Code = cAdvCode;
		SET rWarn.(XMLNSC.Attribute)ShortText = SUBSTRING(cErrorMsg FROM 1 FOR 64);
	END IF;
		
	IF rVxError.ErrorSeverity IN('W', 'I') THEN
		SET rWarn.(XMLNSC.Attribute)Type = '2';
	ELSE
		SET rWarn.(XMLNSC.Attribute)Type = '3';
	END IF;
	
	SET rWarn = FIELDVALUE(rVxError.ErrorMessage);
END;


CREATE PROCEDURE CreateCabinNotAvailMsg(INOUT rEnv REFERENCE, INOUT rOrgMsg REFERENCE, INOUT rOutRoot REFERENCE) 
BEGIN
	DECLARE rOut REFERENCE TO rOutRoot;
	
		-- add MQMD
	CREATE LASTCHILD OF rOutRoot DOMAIN('MQMD') NAME 'MQMD';
	SET rOutRoot.MQMD = rEnv.Temp.Headers.MQMD;
	
	SET rOutRoot.HTTPRequestHeader."x-upstream" = rEnv.endpoint;
	-- create response message
	CREATE LASTCHILD OF rOutRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
	CREATE FIELD rOutRoot.XMLNSC.ns:NCL_CruiseCreateFSGroupRS AS rOut;

	CALL com.ncl.ais.utils.CopyAttributes(rOrgMsg, rOut);

	SET rOut.ns:Warnings.ns:Warning.(XMLNSC.Attribute)Code = '91004';
	SET rOut.ns:Warnings.ns:Warning.(XMLNSC.Attribute)ShortText = 'No cabins available for requested categories';
	SET rOut.ns:Warnings.ns:Warning.(XMLNSC.Attribute)Type = '3';
END;


CREATE PROCEDURE CopyCollectionDetails(INOUT rOrgMsg REFERENCE, INOUT rOut REFERENCE) 
BEGIN
	SET rOut.ns:collectionID = rOrgMsg.collectionID;
	SET rOut.ns:sessionGUID = rOrgMsg.sessionGUID;
	SET rOut.ns:categoryCode = rOrgMsg.categoryCode;
	SET rOut.ns:PackageID = rOrgMsg.PackageID;
	SET rOut.ns:requestNumber = rOrgMsg.requestNumber;
	SET rOut.ns:collectionName = rOrgMsg.collectionName;	
END;
