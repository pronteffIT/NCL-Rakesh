BROKER SCHEMA com.ncl.ais
DECLARE MSG_EXPIRY EXTERNAL INTEGER '3000';
DECLARE LogPayLoad EXTERNAL BOOLEAN ;
--DECLARE DEFAULT_REPLYTOQ EXTERNAL CHARACTER 'NCL_LATITUDES_POINTS_LOOKUP_RESP';
/* ------------------------------------------------------------------------------------
* ********** OWNER ********
* ------------------------------------------------------------------------------------
* COMPANY : Norwegian Cruise Line
* PROJECT : WESB-AIS Migration
* FLOW NAME : NCL_LatitudesPointsLookup
* MODULE NAME : NCL_LatitudesPointsLookup
* Description : This module handles Latitude_Points_Lookup
*
* ------------------------------------------------------------------------------------
* ********** MODIFICATION HISTORY ********
* ------------------------------------------------------------------------------------
* Current Team Revision: $Revision$
* VERSION CRNUM DATE Author Descr of Revision
* 1.0 11/06/2017 Prolifics Initial version
* 1.1
* ------------------------------------------------------------------------------------*/
CREATE COMPUTE MODULE NCL_LatitudesPointsLookup
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		DECLARE rEnv REFERENCE TO Environment.Varibles;
		CREATE FIELD Environment.Variables AS rEnv;
		DECLARE uuid CHARACTER UUIDASCHAR;

		CREATE FIELD OutputRoot.XMLNSC.NCL_LATITUDES_POINTS_LOOKUP_RESP;
		DECLARE rInAuthReq REFERENCE TO InputRoot.XMLNSC.*:NCL_LATITUDES_POINTS_LOOKUP_REQ;
		SET OutputRoot.XMLNSC.NCL_LATITUDES_POINTS_LOOKUP_RESP.TIERS = '';
		DECLARE rOutAuthRes REFERENCE TO OutputRoot.XMLNSC.NCL_LATITUDES_POINTS_LOOKUP_RESP;
		DECLARE rOutLatPtsTiers,rOutLatPtsTier REFERENCE TO rOutAuthRes.TIERS;
		DECLARE cLocalTranId CHARACTER InputRoot.MQMD.MsgId;

		DECLARE p_EFF_DT CHARACTER;
		DECLARE p_ErrorCode CHARACTER;
		DECLARE Temp CHARACTER;
		DECLARE bPayloadIn BLOB ASBITSTREAM(InputRoot.XMLNSC CCSID 1208 ENCODING 546);
		
		IF LENGTH(TRIM(InputRoot.MQMD.ReplyToQ)) =0 THEN
			SET rEnv.MQMD.ReplyToQ = DEFAULT_REPLYTOQ;
		END IF;
		SET rEnv.MQMD = InputRoot.MQMD;
		SET rEnv.MQMD.Expiry = MSG_EXPIRY;
		SET OutputRoot.MQMD = InputRoot.MQMD;
		SET OutputRoot.MQMD.Expiry = MSG_EXPIRY;
		SET rEnv.MQMD.Format = MQFMT_STRING;

		DECLARE P_ErrorMsg CHARACTER;

		DECLARE InpRequest CHARACTER CAST(ASBITSTREAM(InputRoot.XMLNSC CCSID 1208 ENCODING 546) AS CHARACTER CCSID 1208 ENCODING 546);

		SET cLocalTranId = SUBSTRING(REPLACE(cLocalTranId, '''', '') FROM 2);
		-- create IIB log event
			-- add metadata to log event
		--CALL com.ncl.iib.log.CreateMetaData('ReservationId', rIn.*:ReservationId, 'Reservation Id', rEnv);

		---add input payload to logging									 	
		CALL com.ncl.iib.log.CreateAuditLogEvent(rEnv, cLocalTranId, '', '');
		IF(LogPayLoad) THEN
		CALL com.ncl.iib.log.AddPayloadLogEvent(bPayloadIn, NodeLabel, 'Latitude points request message', 'xml', rEnv);
	END IF;
		CALL com.ncl.iib.log.CreateMetaDataSet('',COALESCE(rInAuthReq.SOURCE,''),'','','',rEnv);
		-- log request msg
		SET rEnv.Latlog.rInAuthReq = rInAuthReq;
		-- Checking for date
		SET Temp = SUBSTRING(rInAuthReq.EFF_DT FROM 5 FOR 1);
		IF (Temp = '-')OR (rInAuthReq.EFF_DT ='') THEN

			SET p_EFF_DT = rInAuthReq.EFF_DT;
			-- Call Procedure to Retrive data from NCL_LAT_LOOKUP_TIER
			CALL LOOKUP_TIER(p_EFF_DT,p_ErrorCode,P_ErrorMsg,rEnv.p_Cursor[]);
			CALL com.ncl.iib.log.AddLogEvent(NodeLabel, 'Invocation of Stored proc to insert trigger msg successful', rEnv);
			-- Checking P_Cursor
			IF EXISTS(rEnv.p_Cursor[]) THEN

				FOR p_Cursor AS rEnv.p_Cursor[] DO
					CREATE LASTCHILD OF rOutLatPtsTiers AS rOutLatPtsTier NAME 'TIER';
					SET rOutLatPtsTier.TIER_LEVEL = p_Cursor.TIER_LEVEL;
					SET rOutLatPtsTier.MIN_POINTS = p_Cursor.MIN_POINTS_QTY;
					SET rOutLatPtsTier.EFF_FROM_DT = SUBSTRING(CAST(p_Cursor.EFF_FROM_DT AS CHARACTER FORMAT 'yyyy-MM-dd HH:mm:ss')FROM 1 FOR 10);
						SET rOutLatPtsTier.EFF_TO_DT = SUBSTRING(CAST(p_Cursor.EFF_TO_DT AS CHARACTER FORMAT 'yyyy-MM-dd HH:mm:ss') FROM 1 FOR 10);
					END FOR;
					SET rOutAuthRes.SUCCESS = '';
					SET rOutAuthRes.ERROR_CODE = '0';

				ELSE IF SQLCODE = 0 THEN
					SET rOutAuthRes.ERROR_MSG = SUBSTRING(SQLERRORTEXT AFTER '[ODBC Oracle Wire Protocol driver]');
					SET rOutAuthRes.ERROR_CODE = '9002';
				END IF;
			END IF;
			--Else condition for date
		ELSE
			SET rOutAuthRes.SUCCESS = '';
			SET rOutAuthRes.ERROR_MSG = 'ResourceException thrown in J2CMethodBindingImpl.invoke() javax.resource.ResourceException: java.sql.SQLException: Year out of range., error code: 17361';
			SET rOutAuthRes.ERROR_CODE = '9002';
		END IF;
		-- Add response msg to log event
		DECLARE bPayload BLOB ASBITSTREAM(OutputRoot.XMLNSC CCSID 1208 ENCODING 546);
		IF(LogPayLoad) THEN
		CALL com.ncl.iib.log.AddPayloadLogEvent(bPayload, NodeLabel, 'Latitude Points response message', 'xml', rEnv);
		END IF;
		DECLARE OutResponse CHARACTER CAST(ASBITSTREAM(OutputRoot.XMLNSC CCSID 1208 ENCODING 546) AS CHARACTER CCSID 1208 ENCODING 546);
		SET rEnv.Latlog.RecordId = uuid;
		SET rEnv.Latlog.SourceCode = rInAuthReq.SOURCE;
		SET rEnv.Latlog.RequestTs = CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyy-MM-dd HH:mm:ss');
		SET rEnv.Latlog.RequestMsg = InpRequest;
		SET rEnv.Latlog.RequestTypeCode = 'PTSREQ';
		SET rEnv.Latlog.ResponseTs = CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyy-MM-dd HH:mm:ss');
		SET rEnv.Latlog.ResponseMsg = OutResponse;
	    SET OutputRoot.XMLNSC = NULL;
		SET OutputRoot.BLOB.BLOB = bPayload;
		PROPAGATE;
		--log response msg
		SET OutputRoot.XMLNSC.Latlog = rEnv.Latlog;
		PROPAGATE TO LABEL 'LATLOG';
		RETURN FALSE;
	END;
	--Creating Procedure
	CREATE PROCEDURE LOOKUP_TIER(IN p_EFF_DT CHARACTER, OUT p_ErrorCode CHARACTER ,OUT P_ErrorMsg CHARACTER)
	LANGUAGE DATABASE
	DYNAMIC RESULT SETS 1
	EXTERNAL NAME "NCLSEA.NCL_LAT_LOOKUP_TIER" ;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
END MODULE;
/* ------------------------------------------------------------------------------------
* ********** OWNER ********
* ------------------------------------------------------------------------------------
* COMPANY : Norwegian Cruise Line
* PROJECT : WESB-AIS Migration
* FLOW NAME : NCL_LatitudesPointsLookup
* MODULE NAME : NCL_LatitudesPointsLookup
* Description : This module handles Exception
*
* ------------------------------------------------------------------------------------
* ********** MODIFICATION HISTORY ********
* ------------------------------------------------------------------------------------
* Current Team Revision: $Revision$
* VERSION CRNUM DATE Author Descr of Revision
* 1.0 11/06/2017 Prolifics Initial version
* 1.1
* ------------------------------------------------------------------------------------*/

CREATE COMPUTE MODULE NCL_LatitudesPointsLookup_Exception
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE rEnv REFERENCE TO Environment.Variables;
		DECLARE bPayload BLOB ASBITSTREAM(InputRoot.XMLNSC CCSID 1208 ENCODING 546);
		DECLARE cLocalTranId CHARACTER InputRoot.MQMD.MsgId;

		SET cLocalTranId = SUBSTRING(REPLACE(cLocalTranId, '''', '') FROM 2);

		IF NOT EXISTS(Environment.Variables[]) THEN
			CREATE FIELD Environment.Variables AS rEnv;
		END IF;

		IF NOT EXISTS(rEnv.GTM.LogEvent[]) THEN
			CALL com.ncl.iib.log.CreateAuditLogEvent(rEnv, cLocalTranId, '', '');
			IF(LogPayLoad) THEN
			CALL com.ncl.iib.log.AddPayloadLogEvent(bPayload, NodeLabel, 'Latitude trigger Invalid request message', 'xml', rEnv);
		END IF;
	END IF;

		SET OutputRoot = InputRoot;
		SET OutputRoot.MQMD.Expiry = MSG_EXPIRY;

		RETURN TRUE;
	END;
END MODULE;
/* ------------------------------------------------------------------------------------
* ********** OWNER ********
* ------------------------------------------------------------------------------------
* COMPANY : Norwegian Cruise Line
* PROJECT : WESB-AIS Migration
* FLOW NAME : NCL_LatitudesPointsLookup
* MODULE NAME : NCL_LatitudesPointsLookup
* Description : This module handles FaultException
*
* ------------------------------------------------------------------------------------
* ********** MODIFICATION HISTORY ********
* ------------------------------------------------------------------------------------
* Current Team Revision: $Revision$
* VERSION CRNUM DATE Author Descr of Revision
* 1.0 11/06/2017 Prolifics Initial version
* 1.1
* ------------------------------------------------------------------------------------*/

CREATE COMPUTE MODULE NCL_LatitudesPointsLookup_FaultHandler
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE rExcp REFERENCE TO InputExceptionList;
		DECLARE rEnv REFERENCE TO Environment.Variables;
		CREATE FIELD Environment.Variables AS rEnv;
		
		DECLARE runTimeErr REFERENCE TO OutputRoot.XMLNSC.*:NCL_LATITUDES_POINTS_LOOKUP_RESP;
		
		DECLARE cErrorText CHARACTER 'Internal IIB Error, please check the logs';
		
		IF EXISTS(InputExceptionList.RecoverableException[]) THEN
			CALL com.ncl.iib.utils.getExceptionSummary(rEnv, rExcp);
			SET cErrorText = COALESCE(rEnv.ErrorSummary.ErrorText, '');
		END IF;
		
		SET OutputRoot.MQMD = rEnv.MQMD;
		CREATE FIELD OutputRoot.XMLNSC.*:NCL_LATITUDES_POINTS_LOOKUP_RESP AS runTimeErr;
		
		SET runTimeErr.Errors.Error = cErrorText;
		SET runTimeErr.Errors.Error.(XMLNSC.Attribute)Code = '9999';
		SET runTimeErr.Errors.Error.(XMLNSC.Attribute)ShortText = RIGHT(cErrorText,64);
		SET runTimeErr.Errors.Error.(XMLNSC.Attribute)Type = '3';

		RETURN TRUE;
	END;
END MODULE;