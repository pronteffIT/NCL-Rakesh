BROKER SCHEMA com.ncl.ais

DECLARE ns NAMESPACE 'http://nclapi/schemas';
--DECLARE nsValAgency NAMESPACE 'http://NCL_ValidateBookingLib';
DECLARE MsgExpiry EXTERNAL INTEGER 3000;
DECLARE DEFAULT_REPLYQ EXTERNAL CHARACTER 'NCL_CRUISE_AVAIL_ONBRD_PKG_RESP';
DECLARE LogPayLoad EXTERNAL BOOLEAN FALSE;
DECLARE XC10CacheMap EXTERNAL CHARACTER 'PACKAGE.LAT.P';
DECLARE XC10ConnectionConfig EXTERNAL CHARACTER 'XC10ConnectionConfig';
DECLARE AgencyMap EXTERNAL CHARACTER '';

CREATE COMPUTE MODULE NCL_CruiseGetAvailOnBoardPackages_Exception
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE rEnv,rOutResp,rOutErrors REFERENCE TO Environment.Variables;
		DECLARE rExcp REFERENCE TO InputExceptionList;
		
		DECLARE cLocalTranId CHARACTER COALESCE(InputRoot.MQMD.MsgId, UUIDASCHAR);
		DECLARE bPayload BLOB ASBITSTREAM(InputRoot.XMLNSC CCSID 1208 ENCODING 546);
		SET cLocalTranId = TRANSLATE(cLocalTranId, 'X''', '');
		
		CALL CopyMessageHeaders();
		-- If no Reply To Queue mentioned, default to the queue defined in UDP
		IF LENGTH(TRIM(InputRoot.MQMD.ReplyToQ)) = 0 
		THEN
			SET OutputRoot.MQMD.ReplyToQ = DEFAULT_REPLYQ;
		END IF;
		
		
		IF NOT EXISTS(Environment.Variables[]) THEN
			CREATE FIELD Environment.Variables AS rEnv;
		END IF;

		IF NOT EXISTS(rEnv.GTM.LogEvent[]) THEN
			CALL com.ncl.iib.log.CreateAuditLogEvent(rEnv, cLocalTranId, '', '');
			IF (LogPayLoad) THEN
				--creating IIB Log Event
				CALL com.ncl.iib.log.AddPayloadLogEvent(bPayload, NodeLabel, 'Cruise GetAvailOnBoardPackages Request', 'xml', rEnv);
			END IF;	
		ELSE
			CALL com.ncl.iib.log.AddLogEvent(NodeLabel, 'Unhandled Exception in IIB : Internal IIB Error', rEnv);	
		END IF;
		
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS rOutResp IDENTITY ns:NCL_CruiseGetAvailOnBoardPackagesRS;
		
		-- Copy root level attributes from environment if the Input Message was stored
		IF EXISTS (rEnv.InReq.*:NCL_CruiseGetAvailOnBoardPackagesRQ[]) 
		THEN
			DECLARE RefInReq REFERENCE TO rEnv.InReq.*:NCL_CruiseGetAvailOnBoardPackagesRQ;
			CALL com.ncl.ais.utils.CopyAttributes (RefInReq,rOutResp);
		END IF;
		
		IF EXISTS(InputExceptionList.RecoverableException[]) THEN
			CALL com.ncl.iib.utils.getExceptionSummary(rEnv, rExcp);
		END IF;
		
		DECLARE cErrorText CHARACTER COALESCE(rEnv.ErrorSummary.ErrorText, 'Internal IIB Error, please check the logs');
		
		SET rOutResp.ns:Errors.ns:Error = cErrorText;
		SET rOutResp.ns:Errors.ns:Error.(XMLNSC.Attribute)Code = '12228';
		SET rOutResp.ns:Errors.ns:Error.(XMLNSC.Attribute)ShortText = 'System error from back end. Please try again later';
		SET rOutResp.ns:Errors.ns:Error.(XMLNSC.Attribute)Type = '3';
		
		IF (LogPayLoad) THEN
			-- Add response msg to log event
			SET bPayload = ASBITSTREAM(OutputRoot.XMLNSC CCSID 1208 ENCODING 546);
			CALL com.ncl.iib.log.AddPayloadLogEvent(bPayload, NodeLabel, 'Cruise GetAvailOnBoardPackages Response message', 'xml', rEnv);
		END IF;				

		PROPAGATE TO TERMINAL 'out1' DELETE NONE;
				
		SET OutputRoot = InputRoot;

		RETURN TRUE;
	END;
	
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
END MODULE;


CREATE COMPUTE MODULE NCL_CruiseGetAvailOnBoardPackages_LoginReq
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CREATE FIELD Environment.Variables;
		DECLARE rEnv,rOutSource REFERENCE TO Environment.Variables;
		SET rEnv.MQMD = InputRoot.MQMD;
		SET rEnv.MQMD.Expiry = MsgExpiry;
		SET rEnv.MQMD.Format = MQFMT_STRING;
		CREATE LASTCHILD OF rEnv DOMAIN 'XMLNSC' NAME 'InReq' ;
		-- Backup the MQMD details
		SET OutputRoot.MQMD = InputRoot.MQMD;
		SET OutputRoot.MQMD.Format = MQFMT_STRING;	
		
		-- If no Reply To Queue mentioned, default to the queue defined in UDP	
		IF LENGTH(TRIM(InputRoot.MQMD.ReplyToQ)) = 0 
		THEN				
			SET rEnv.MQMD.ReplyToQ = DEFAULT_REPLYQ;
		END IF;
		
		SET rEnv.InReq=InputRoot.XMLNSC;
		DECLARE rIn REFERENCE TO InputRoot.XMLNSC.*:NCL_CruiseGetAvailOnBoardPackagesRQ.*:POS.*:Source;

		DECLARE cLocalTranId CHARACTER COALESCE(InputRoot.MQMD.MsgId, UUIDASCHAR);
		DECLARE cLoyaltyMbrId CHARACTER '';
		DECLARE bPayload BLOB ASBITSTREAM(InputRoot.XMLNSC CCSID 1208 ENCODING 546);
		CREATE FIELD OutputRoot.XMLNSC.VerifyAgencyRequest.source AS rOutSource;
		SET cLocalTranId = TRANSLATE(cLocalTranId, 'X''', '');
		
		--creating IIB Log Event
		CALL com.ncl.iib.log.CreateAuditLogEvent(rEnv,cLocalTranId,'','');
		
		CALL com.ncl.iib.log.CreateMetaDataSet(COALESCE(rIn.*:RequestorID.(XMLNSC.Attribute)ID, COALESCE(rIn.(XMLNSC.Attribute)PseudoCityCode, '')),
												COALESCE(rIn.*:BookingChannel.*:CompanyName.(XMLNSC.Attribute)Code, ''),
												COALESCE(InputRoot.XMLNSC.*:NCL_CruiseGetAvailOnBoardPackagesRQ.*:ReservationID.(XMLNSC.Attribute)ID, ''),
												'',
												'',
											 	rEnv);


		IF (LogPayLoad) THEN
			CALL com.ncl.iib.log.AddPayloadLogEvent(bPayload, NodeLabel, 'Cruise GetAvailBoardPackages Info Request', 'xml', rEnv);
		END IF;
		
		SET rOutSource.BookingChannel.CompanyName.(XMLNSC.Attribute)Code = rIn.*:BookingChannel.*:CompanyName.(XMLNSC.Attribute)Code;
		SET rOutSource.RequestorID.(XMLNSC.Attribute)ID = rIn.*:RequestorID.(XMLNSC.Attribute)ID;
		SET rOutSource.(XMLNSC.Attribute)PseudoCityCode = rIn.(XMLNSC.Attribute)PseudoCityCode;

		RETURN TRUE;
	END;
END MODULE;


CREATE COMPUTE MODULE NCL_CruiseGetAvailOnBoardPackages_CheckDining
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CREATE FIELD Environment.Variables;
		DECLARE rEnv,rOutSource, refOut REFERENCE TO Environment.Variables;
		
		SET rEnv.MQMD = InputRoot.MQMD;
		SET rEnv.MQMD.Expiry = MsgExpiry;
		SET rEnv.MQMD.Format = MQFMT_STRING;
		
		CREATE LASTCHILD OF rEnv DOMAIN 'XMLNSC' NAME 'InReq' ;
		-- Backup the MQMD details
		SET OutputRoot.MQMD = InputRoot.MQMD;
		SET OutputRoot.MQMD.Format = MQFMT_STRING;	
		
		-- If no Reply To Queue mentioned, default to the queue defined in UDP	
		IF LENGTH(TRIM(InputRoot.MQMD.ReplyToQ)) = 0 
		THEN				
			SET rEnv.MQMD.ReplyToQ = DEFAULT_REPLYQ;
		END IF;
		
		SET rEnv.InReq=InputRoot.XMLNSC;
		DECLARE rIn REFERENCE TO InputRoot.XMLNSC.*:NCL_CruiseGetAvailOnBoardPackagesRQ.*:POS.*:Source;

		DECLARE cLocalTranId CHARACTER COALESCE(InputRoot.MQMD.MsgId, UUIDASCHAR);
		DECLARE cLoyaltyMbrId CHARACTER '';
		DECLARE bPayload BLOB ASBITSTREAM(InputRoot.XMLNSC CCSID 1208 ENCODING 546);
		CREATE FIELD OutputRoot.XMLNSC.VerifyAgencyRequest.source AS rOutSource;
		SET cLocalTranId = TRANSLATE(cLocalTranId, 'X''', '');
		
		--creating IIB Log Event
		CALL com.ncl.iib.log.CreateAuditLogEvent(rEnv,cLocalTranId,'','');
		
		CALL com.ncl.iib.log.CreateMetaDataSet(COALESCE(rIn.*:RequestorID.(XMLNSC.Attribute)ID, COALESCE(rIn.(XMLNSC.Attribute)PseudoCityCode, '')),
												COALESCE(rIn.*:BookingChannel.*:CompanyName.(XMLNSC.Attribute)Code, ''),
												COALESCE(InputRoot.XMLNSC.*:NCL_CruiseGetAvailOnBoardPackagesRQ.*:ReservationID.(XMLNSC.Attribute)ID, ''),
												'',
												'',
											 	rEnv);


		IF (LogPayLoad) THEN
			CALL com.ncl.iib.log.AddPayloadLogEvent(bPayload, NodeLabel, 'Cruise GetAvailBoardPackages Info Request', 'xml', rEnv);
		END IF;
		SET rOutSource.BookingChannel.CompanyName.(XMLNSC.Attribute)Code = rIn.*:BookingChannel.*:CompanyName.(XMLNSC.Attribute)Code;
		SET rOutSource.RequestorID.(XMLNSC.Attribute)ID = rIn.*:RequestorID.(XMLNSC.Attribute)ID;
		SET rOutSource.(XMLNSC.Attribute)PseudoCityCode = rIn.(XMLNSC.Attribute)PseudoCityCode;
		
		--DECLARE rEnv REFERENCE TO Environment.Variables;
		--DECLARE rVAIn REFERENCE TO InputRoot.XMLNSC.*:VerifyAgencyResponse;
		--CREATE LASTCHILD OF rEnv DOMAIN 'XMLNSC' NAME 'CallableRes' ;
		--SET rEnv.CallableRes = InputRoot.XMLNSC.*:VerifyAgencyResponse;
		DECLARE RefInReq REFERENCE TO rEnv.InReq.*:NCL_CruiseGetAvailOnBoardPackagesRQ;
		
		--SET rEnv.SessionGUID = InputRoot.XMLNSC.*:VerifyAgencyResponse.sessionGUID;
		--SET rEnv.agencyID = InputRoot.XMLNSC.*:VerifyAgencyResponse.*:agencyID;
		--SET rEnv.agencyCurrency = InputRoot.XMLNSC.*:VerifyAgencyResponse.*:agencyCurrency;
		SET rEnv.ReservationID = FIELDVALUE(RefInReq.*:ReservationID.(XMLNSC.Attribute)ID);
		SET rEnv.agencyID = FIELDVALUE(RefInReq.*:POS.*:Source.*:RequestorID.(XMLNSC.Attribute)ID);
		SET rEnv.ReservationID = FIELDVALUE(RefInReq.*:ReservationID.(XMLNSC.Attribute)ID);
		SET rEnv.PCC = COALESCE(RefInReq.*:POS.*:Source.(XMLNSC.Attribute)PseudoCityCode, '');
		SET rEnv.SystemName = COALESCE(RefInReq.*:POS.*:Source.*:BookingChannel.*:CompanyName.(XMLNSC.Attribute)Code, 'SABRE');
		
		--SET rEnv.EndPoint = InputRoot.XMLNSC.*:VerifyAgencyResponse.endpoint;
		DECLARE ResID INTEGER;
		SET ResID = CAST(rEnv.ReservationID AS INTEGER);
		SET rEnv.BkingChnlCompCd = RefInReq.*:POS.*:Source.*:BookingChannel.*:CompanyName.(XMLNSC.Attribute)Code;

		-- add audit trail
		CALL com.ncl.iib.log.AddLogEvent(NodeLabel, 'Verifyig the agency ...', rEnv);
		
		CALL com.ncl.ais.utils.LookupAgencyInfo(rEnv.agencyID, rEnv.PCC, rEnv.SystemName, AgencyMap, XC10ConnectionConfig, rEnv);
		
		IF EXISTS(rEnv.Temp.AgencyInfoError[]) THEN
			SET OutputRoot.MQMD = InputRoot.MQMD;
			
			CREATE FIELD OutputRoot.XMLNSC.ns:NCL_CruiseGetAvailOnBoardPackagesRS AS refOut;
			
			-- Copy root level attributes from environment
			CALL com.ncl.ais.utils.CopyAttributes (RefInReq, refOut);
			
			-- Construct The Error Response from Verify Agecncy Response
			CALL com.ncl.ais.utils.MapVAErrorsToOTAResponse(rEnv.Temp.AgencyInfoError, refOut);
			
			PROPAGATE TO TERMINAL 'out1';
			
			RETURN FALSE;
		END IF;

		IF FIELDVALUE(rEnv.agencyID) IS NOT NULL THEN
			SET rEnv.AgencyInfo = rEnv.Temp.AgencyInfo;
			
			-- Changes for Airwave on 07/03/2018
			--SET rEnv.isVrsnxSuccess = TRUE;
			-- Call the LoadBooking and UpdateBooking Respectively to get the Bookings
			--PROPAGATE TO TERMINAL 'out3';
		
			--IF rEnv.isVrsnxSuccess THEN
				-- Check Dining
			IF RefInReq.*:OnBoardActivity = 'EXCURSION' THEN
				-- Genereate Warning
				SET OutputRoot.XMLNSC.Body.Errors = '';
				SET OutputRoot.XMLNSC.Body.Code= rEnv.BkingChnlCompCd;
				SET OutputRoot.XMLNSC.Body.FlowName = 'NCL_CruiseGetAvailOnBoardPackagesRS';
				SET OutputRoot.MQMD = rEnv.MQMD;

				PROPAGATE TO TERMINAL 'out2';
				RETURN FALSE;
			ELSEIF RefInReq.*:OnBoardActivity = 'DINING' THEN 
				-- Dining Request
				PROPAGATE TO LABEL 'DINING';
			ELSE
				--- Get Shore Ex
				PROPAGATE TO LABEL 'SHOREX';
			END IF;
			--END IF;	
		ELSE
			-- ERROR Response from Callable FLow 
			SET OutputRoot.MQMD = rEnv.MQMD;
			
			--CREATE FIELD OutputRoot.XMLNSC.ns:NCL_CruiseGetAvailOnBoardPackagesRS AS refOut;
			--DECLARE RefInReq REFERENCE TO rEnv.InReq.*:NCL_CruiseGetAvailOnBoardPackagesRQ;
			--CALL com.ncl.ais.utils.CopyAttributes (RefInReq,refOut); 
			
			--CALL com.ncl.ais.utils.MapVAErrorsToOTAResponse(rVAIn,refOut);
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
		END IF;

		RETURN FALSE;
	END;


END MODULE;


CREATE COMPUTE MODULE NCL_CruiseGetAvailBoardPackages_LogOut
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot.HTTPRequestHeader."x-upstream" = Environment.Variables.EndPoint;
		SET OutputRoot.XMLNSC.Logout_IN.MsgHeader.Version =  com.ncl.ais.utils.GetVersonixAPIVersion();
		SET OutputRoot.XMLNSC.Logout_IN.MsgHeader.SessionGUID = Environment.Variables.SessionGUID;

		RETURN TRUE;
	END;	

END MODULE;

CREATE COMPUTE MODULE NCL_CruiseGetAvailBoardPackages_SetEndpoint
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		SET OutputRoot.MQMD = Environment.Variables.MQMD;
		SET OutputRoot.MQMD.Format = MQFMT_RF_HEADER_2;
		SET OutputRoot.MQRFH2.usr.Endpoint = Environment.Variables.EndPoint;

		IF EXISTS(InputRoot.BLOB.BLOB[]) THEN

			SET OutputRoot.BLOB.BLOB = InputRoot.BLOB.BLOB;
		ELSE
			SET OutputRoot.XMLNSC = InputRoot.XMLNSC;
		END IF;


		RETURN TRUE;
	END;
END MODULE;
