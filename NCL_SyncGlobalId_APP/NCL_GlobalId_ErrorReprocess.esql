DECLARE MaxRetries EXTERNAL INTEGER 3;
DECLARE BatchSize EXTERNAL INTEGER 0;
DECLARE MessageExpiry EXTERNAL INTEGER 36000;

CREATE COMPUTE MODULE Read_Messages
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE rEv REFERENCE TO Environment.Variables;
		DECLARE index INTEGER 1;
		
		IF NOT LASTMOVE(rEv) THEN
			CREATE FIELD Environment.Variables AS rEv;
		END IF;
		
		SET rEv.AllMessagesRead = 'false';
		
		WHILE rEv.AllMessagesRead = 'false' AND index <= BatchSize DO
			PROPAGATE TO TERMINAL 'out';
			
			SET index = index + 1;
		END WHILE;
		
		RETURN FALSE;
	END;
END MODULE;

CREATE COMPUTE MODULE SetDestinationQueue
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE rRfhUsr REFERENCE TO InputRoot.MQRFH2.usr;
		
		SET OutputRoot = InputRoot;
		SET OutputLocalEnvironment = InputLocalEnvironment;

		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = rRfhUsr.SourceQueue;
		
		DELETE FIELD OutputRoot.MQRFH2.mcd;		
		PROPAGATE FINALIZE NONE;

		RETURN FALSE;
	END;
END MODULE;


CREATE COMPUTE MODULE SetFlag
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET Environment.Variables.AllMessagesRead = 'true';
		
		RETURN TRUE;
	END;
END MODULE;


CREATE COMPUTE MODULE ProcessErrors
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE rEnv REFERENCE TO Environment.Variables;
		DECLARE rExcp REFERENCE TO InputExceptionList;
		DECLARE cLocalTranId CHARACTER COALESCE(InputRoot.MQMD.MsgId, UUIDASCHAR);
		
		SET cLocalTranId = TRANSLATE(cLocalTranId, 'X''', '');
		
		IF NOT EXISTS(Environment.Variables[]) THEN 
			CREATE FIELD Environment.Variables AS rEnv;
		END IF;

		IF NOT EXISTS(rEnv.GTM.LogEvent[]) THEN
			CALL com.ncl.iib.log.CreateAuditLogEvent(rEnv, cLocalTranId, '', '');
		END IF;

		IF NOT EXISTS(rEnv.ErrorSummary[]) THEN
			CALL com.ncl.iib.utils.getExceptionSummary(rEnv, rExcp);
		END IF;
		
		SET OutputRoot = InputRoot;
		
		RETURN TRUE;
	END;
END MODULE;

