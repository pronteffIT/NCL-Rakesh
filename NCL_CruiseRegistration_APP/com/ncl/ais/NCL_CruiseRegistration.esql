BROKER SCHEMA com.ncl.ais
DECLARE DEFAULT_ReplyToQ EXTERNAL CHARACTER 'NCL_CRUISE_REGISTRATION_RESP';
DECLARE ns NAMESPACE 'http://nclapi/schemas';
DECLARE MsgExpiry EXTERNAL INTEGER 3000;
DECLARE LogPayload EXTERNAL BOOLEAN;

/* ------------------------------------------------------------------------------------
 *  ***********                            OWNER                              *********
 * ------------------------------------------------------------------------------------
 * COMPANY           :     Norwegian Cruise Line
 * PROJECT           :     WESB-AIS Migration
 * FLOW NAME         :     NCL_CruiseRegistration
 * MODULE NAME       :     CruiseRegistration_LogInReq
 * Description       :     This module creates Request Message for LogIn Calllable Module
 * ------------------------------------------------------------------------------------
 *  ***********                      MODIFICATION HISTORY                     *********
 * ------------------------------------------------------------------------------------
 * Current Team Revision: $Revision$    

 * VERSION  CRNUM       DATE       Author        Descr of Revision
 * 1.0               11/26/2017   Prolifics      Initial version
 * 1.1        
 * ------------------------------------------------------------------------------------*/

CREATE COMPUTE MODULE NCL_CruiseRegistration_LogInReq
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE rEnv REFERENCE TO Environment.Variables;
		DECLARE rInReq REFERENCE TO InputRoot.XMLNSC.*:NCL_CruiseRegistrationRQ;	
		DECLARE cLocalTransId CHARACTER COALESCE(InputRoot.MQMD.MsgId,UUIDASCHAR);
		SET cLocalTransId = SUBSTRING(REPLACE(cLocalTransId, '''', '') FROM 2);
		
		CREATE FIELD Environment.Variables AS rEnv;
		
		SET rEnv.Temp.Protocol = 'MQ';
		
		IF EXISTS(InputLocalEnvironment.Destination.CallableFlow.Reply.ReplyIdentifier[]) THEN
			SET rEnv.Temp.Protocol = 'CALLABLE';
		END IF;	
		
		--IIB Log Event
		CALL com.ncl.iib.log.CreateAuditLogEvent(rEnv, cLocalTransId, '', '');
		
		-- Add payload logging
		IF LogPayload THEN 
			DECLARE inPayload BLOB ASBITSTREAM(InputRoot.XMLNSC CCSID 1208 ENCODING 546);
			CALL com.ncl.iib.log.AddPayloadLogEvent(inPayload, NodeLabel, 'Cruise Registration Request', 'xml', rEnv);
		END IF;
		
		DECLARE Requestor,BookingChannel CHARACTER;
		
		SET Requestor = COALESCE(FIELDVALUE(rInReq.*:POS.*:Source.*:RequestorID.(XMLNSC.Attribute)ID),COALESCE(FIELDVALUE(rInReq.*:POS.*:Source.(XMLNSC.Attribute)PseudoCityCode),''));
		SET BookingChannel = COALESCE(FIELDVALUE(rInReq.*:POS.*:Source.*:BookingChannel.*:CompanyName.(XMLNSC.Attribute)Code),'');
		
		--add MetaData to Log Event
		CALL com.ncl.iib.log.CreateMetaDataSet(Requestor,BookingChannel,'','','',rEnv);
		
		--Adding MQMD Headers to Environment
		SET rEnv.TempHeaders.MQMD = InputRoot.MQMD;
		SET rEnv.TempHeaders.MQMD.Expiry = MsgExpiry;
		SET rEnv.TempHeaders.MQMD.Format = MQFMT_STRING;
		
		--Setting Default Reply to Queue to Environment
		IF COALESCE(InputRoot.MQMD.ReplyToQ,'')='' THEN
			SET rEnv.TempHeaders.MQMD.ReplyToQ = DEFAULT_ReplyToQ;
		END IF;
		
		--Saving Input message to Environment
		CREATE LASTCHILD OF rEnv.Temp DOMAIN 'XMLNSC' NAME 'InpReq';
		SET rEnv.Temp.InpReq = rInReq;
--		SET rEnv.Temp.InpReq.NCL_CruiseRegistrationRQ.(XMLNSC.NamespaceDecl)xmlns = NULL;
		
		-- add audit trail
		CALL com.ncl.iib.log.AddLogEvent(NodeLabel, 'Calling login service ...', rEnv);
		
		--creating Log In Request
		SET OutputRoot.MQMD = InputRoot.MQMD;
		SET OutputRoot.XMLNSC.LoginRequest.source = rEnv.Temp.InpReq.*:POS.*:Source;
		
		
		RETURN TRUE;
	END;
END MODULE;

/* ------------------------------------------------------------------------------------
 *  ***********                            OWNER                              *********
 * ------------------------------------------------------------------------------------
 * COMPANY           :     Norwegian Cruise Line
 * PROJECT           :     WESB-AIS Migration
 * FLOW NAME         :     NCL_CruiseRegistration
 * MODULE NAME       :     CruiseRegistration_GetAgency
 * Description       :     This module creates Request Message for Get Agency
 * ------------------------------------------------------------------------------------
 *  ***********                      MODIFICATION HISTORY                     *********
 * ------------------------------------------------------------------------------------
 * Current Team Revision: $Revision$    

 * VERSION  CRNUM       DATE       Author        Descr of Revision
 * 1.0               11/26/2017   Prolifics      Initial version
 * 1.1        
 * ------------------------------------------------------------------------------------*/

CREATE COMPUTE MODULE NCL_CruiseRegistration_GetAgency
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		DECLARE rEnv,rOutReg,rOutLoadAgency REFERENCE TO Environment.Variables;
		DECLARE rInReq REFERENCE TO InputRoot.XMLNSC.*:NCL_CruiseRegistrationRQ;	
		DECLARE cLocalTransId CHARACTER COALESCE(InputRoot.MQMD.MsgId,UUIDASCHAR);
		SET cLocalTransId = SUBSTRING(REPLACE(cLocalTransId, '''', '') FROM 2);
		
		CREATE FIELD Environment.Variables AS rEnv;
		
		SET rEnv.Temp.Protocol = 'MQ';
		
		IF EXISTS(InputLocalEnvironment.Destination.CallableFlow.Reply.ReplyIdentifier[]) THEN
			SET rEnv.Temp.Protocol = 'CALLABLE';
		END IF;	
		
		--IIB Log Event
		CALL com.ncl.iib.log.CreateAuditLogEvent(rEnv, cLocalTransId, '', '');
		
		-- Add payload logging
		IF LogPayload THEN 
			DECLARE inPayload BLOB ASBITSTREAM(InputRoot.XMLNSC CCSID 1208 ENCODING 546);
			CALL com.ncl.iib.log.AddPayloadLogEvent(inPayload, NodeLabel, 'Cruise Registration Request', 'xml', rEnv);
		END IF;
		
		DECLARE Requestor,BookingChannel CHARACTER;
		
		SET Requestor = COALESCE(FIELDVALUE(rInReq.*:POS.*:Source.*:RequestorID.(XMLNSC.Attribute)ID),COALESCE(FIELDVALUE(rInReq.*:POS.*:Source.(XMLNSC.Attribute)PseudoCityCode),''));
		SET BookingChannel = COALESCE(FIELDVALUE(rInReq.*:POS.*:Source.*:BookingChannel.*:CompanyName.(XMLNSC.Attribute)Code),'');
		
		--add MetaData to Log Event
		CALL com.ncl.iib.log.CreateMetaDataSet(Requestor,BookingChannel,'','','',rEnv);
		
		--Adding MQMD Headers to Environment
		SET rEnv.TempHeaders.MQMD = InputRoot.MQMD;
		SET rEnv.TempHeaders.MQMD.Expiry = MsgExpiry;
		SET rEnv.TempHeaders.MQMD.Format = MQFMT_STRING;
		
		--Setting Default Reply to Queue to Environment
		IF COALESCE(InputRoot.MQMD.ReplyToQ,'')='' THEN
			SET rEnv.TempHeaders.MQMD.ReplyToQ = DEFAULT_ReplyToQ;
		END IF;
		
		
		--Saving Input message to Environment
		CREATE LASTCHILD OF rEnv.Temp DOMAIN 'XMLNSC' NAME 'InpReq';
		SET rEnv.Temp.InpReq = rInReq;
	
		SET rEnv.Temp.ReqID = COALESCE(FIELDVALUE(rEnv.Temp.InpReq.*:POS.*:Source.*:RequestorID.(XMLNSC.Attribute)ID),'');
		SET rEnv.Temp.Pcc = FIELDVALUE(rEnv.Temp.InpReq.*:POS.*:Source.(XMLNSC.Attribute)PseudoCityCode);
		SET rEnv.Temp.CompanyCode = FIELDVALUE(rEnv.Temp.InpReq.*:POS.*:Source.*:BookingChannel.*:CompanyName.(XMLNSC.Attribute)Code);

		IF rEnv.Temp.ReqID = '' OR NOT EXISTS(rEnv.Temp.ReqID[]) THEN
			
			DECLARE query CHARACTER 'SELECT DISTINCT AG.AGENCY_ID FROM SEA.AGENCY_EXTERNAL AG
											WHERE AG.PSEUDO_CITY_CODE =?';
											
			SET rEnv.Temp.AgencyID[] = PASSTHRU(query VALUES(rEnv.Temp.Pcc));
											
			IF NOT EXISTS(rEnv.Temp.AgencyID[]) THEN
				
				SET OutputRoot.MQMD = rEnv.TempHeaders.MQMD;
				CREATE FIELD OutputRoot.XMLNSC.ns:NCL_CruiseRegistrationRS AS rOutReg;
				
				SET rOutReg.ns:Warnings.ns:Warning.(XMLNSC.Attribute)Code = '12805';
				SET rOutReg.ns:Warnings.ns:Warning.(XMLNSC.Attribute)ShortText = 'Agency Pseudo City is not on file';
				SET rOutReg.ns:Warnings.ns:Warning.(XMLNSC.Attribute)Type = '3';
				
				PROPAGATE TO TERMINAL 'out1';
				RETURN FALSE;
			END IF;
			
		END IF;
		
		-- add audit trail
		CALL com.ncl.iib.log.AddLogEvent(NodeLabel, 'Load Agency...', rEnv);
		SET OutputRoot.HTTPRequestHeader."x-upstream" = rInReq.Temp.EndPoint;
		CREATE LASTCHILD OF OutputRoot.XMLNSC  AS rOutLoadAgency DOMAIN 'XMLNSC' NAME 'LoadAgency_IN';
		
	--	SET rOutLoadAgency.MsgHeader.Version = VersonixAPIVersion;
		CALL com.ncl.ais.utils.CreateVersonixHeader(rInReq.Temp.sessionGUID,rOutLoadAgency);
		SET rOutLoadAgency.MsgHeader.CallerInfo.UserInfo.Internal.Username = BookingChannel;
		SET rOutLoadAgency.MsgHeader.CallerInfo.ExtSystemInfo.SourceCode =  BookingChannel;
	--	SET rOutLoadAgency.MsgHeader.SessionGUID = rInReq.Temp.sessionGUID;--rEnv.Temp.LogResp.sessionGUID;
		SET rOutLoadAgency.AgencyShellOptions.IncludeElements = 'AgencyHeader Addresses Phones';
		SET rOutLoadAgency.AgencyID = CAST(COALESCE(rEnv.Temp.AgencyID.AGENCY_ID,rEnv.Temp.ReqID) AS INTEGER);

		RETURN TRUE;
	END;
END MODULE;

/* ------------------------------------------------------------------------------------
 *  ***********                            OWNER                              *********
 * ------------------------------------------------------------------------------------
 * COMPANY           :     Norwegian Cruise Line
 * PROJECT           :     WESB-AIS Migration
 * FLOW NAME         :     NCL_CruiseRegistration
 * MODULE NAME       :     CruiseRegistration_Contact
 * Description       :     This module creaates contact info for an Agency
 * ------------------------------------------------------------------------------------
 *  ***********                      MODIFICATION HISTORY                     *********
 * ------------------------------------------------------------------------------------
 * Current Team Revision: $Revision$    

 * VERSION  CRNUM       DATE       Author        Descr of Revision
 * 1.0               11/26/2017   Prolifics      Initial version
 * 1.1        
 * ------------------------------------------------------------------------------------*/
 
CREATE COMPUTE MODULE NCL_CruiseRegistration_Contact
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE rEnv,rOutReg,rOutAgencyPh,rOutAgencyAd REFERENCE TO Environment.Variables;
		DECLARE rInLoad,rAddress REFERENCE TO InputRoot.XMLNSC.LoadAgency_OUT;
		DECLARE rInLoadAdd REFERENCE TO rInLoad.Agency.Addresses;
		DECLARE rInLoadPh REFERENCE TO rInLoad.Agency.Phones;
		
		SET rEnv.endPoint = COALESCE(InputRoot.HTTPResponseHeader."x-upstream", '');
		
		DECLARE query CHARACTER 'SELECT DETAILS.SW_CODE, DETAILS.EXTERNAL_CODE FROM SEA.EXTERNAL_XREF_DETAIL DETAILS
											INNER JOIN(SELECT XREF.EXTERNAL_XREF_ID, XREF.EXTERNAL_TABLE FROM SEA.EXTERNAL_XREF XREF 
											INNER JOIN SEA.EXTERNAL_NAMES NAMES ON XREF.EXTERNAL_NAMES_ID=NAMES.EXTERNAL_NAMES_ID WHERE NAMES.EXTERNAL_NAME = ?) 
											TEMP_JOIN ON DETAILS.EXTERNAL_XREF_ID = TEMP_JOIN.EXTERNAL_XREF_ID WHERE TEMP_JOIN.EXTERNAL_TABLE=?';
		DECLARE phType,adType INTEGER;
		
		---Query for Phone Types---
		SET rEnv.Temp.PHType[] = PASSTHRU(query VALUES(rEnv.Temp.CompanyCode,'PUT'));
		SET phType = CARDINALITY(rEnv.Temp.PHType[]);
		
		---Query for Address Types---
		SET rEnv.Temp.ADType[] = PASSTHRU(query VALUES(rEnv.Temp.CompanyCode,'AUT'));
		SET adType = CARDINALITY(rEnv.Temp.ADType[]);
		
		IF NOT EXISTS(rEnv.Temp.PHType[]) OR phType>100 OR SQLCODE<>0 THEN
			
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
		END IF;
		
		
		IF NOT EXISTS(rEnv.Temp.ADType[]) OR adType>100 OR SQLCODE<>0 THEN
		
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
		END IF;
		
		
		SET OutputRoot.MQMD = rEnv.TempHeaders.MQMD;
		
		CREATE FIELD OutputRoot.XMLNSC.ns:NCL_CruiseRegistrationRS AS rOutReg;
		
		SET rOutReg.(XMLNSC.Attribute)EchoToken = rEnv.Temp.LogResp.sessionGUID;
		SET rOutReg.(XMLNSC.Attribute)TransactionIdentifier = rEnv.Temp.InpReq.(XMLNSC.Attribute)TransactionIdentifier;
		SET rOutReg.(XMLNSC.Attribute)Version = '2.0';
		
		CREATE FIELD rOutReg.ns:Success;
		
		SET rOutReg.ns:AgencyInfo.(XMLNSC.Attribute)AgencyID = COALESCE(rInLoad.Agency.AgencyHeader.AgencyID,'');
		SET rOutReg.ns:AgencyInfo.(XMLNSC.Attribute)AgencyName = rInLoad.Agency.AgencyHeader.Name;
		SET rOutReg.ns:AgencyInfo.(XMLNSC.Attribute)PseudoCityCode = COALESCE(rEnv.Temp.Pcc,'');
		
		----Phone Info----
		CREATE FIELD rOutReg.ns:AgencyInfo.ns:AgencyPhones;
		FOR rInPH AS rInLoadPh.Phone[] DO
			
			SET rEnv.Temp.PhUserType[] = SELECT PHTYP FROM rEnv.Temp.PHType[] AS PHTYP
									WHERE PHTYP.SW_CODE = rInPH.PhoneType;
			
			CREATE LASTCHILD OF rOutReg.ns:AgencyInfo.ns:AgencyPhones AS rOutAgencyPh NAMESPACE ns NAME 'AgencyPhone';
			
			SET rOutAgencyPh.(XMLNSC.Attribute)Extension = rInPH.Extension;
			SET rOutAgencyPh.(XMLNSC.Attribute)isPrimary = rInPH.IsPrimary;
			SET rOutAgencyPh.(XMLNSC.Attribute)PhoneNumber = rInPH.PhoneNumber;
			SET rOutAgencyPh.(XMLNSC.Attribute)PhoneUseType = COALESCE(rEnv.Temp.PhUserType.EXTERNAL_CODE,'');
		END FOR;
		
		----Address Info----
		CREATE FIELD rOutReg.ns:AgencyInfo.ns:AgencyAddresses;
		FOR rInAD AS rInLoadAdd.Address[] DO
				
			CREATE LASTCHILD OF rOutReg.ns:AgencyInfo.ns:AgencyAddresses AS rOutAgencyAd NAMESPACE ns NAME 'AgencyAddress';
			
			CASE
			WHEN (rInAD.AddressType <> 'E MAIL') THEN
					
					SET rEnv.Temp.AddUserType[] = SELECT ADDTYP FROM rEnv.Temp.ADType[] AS ADDTYP
									WHERE ADDTYP.SW_CODE = rInAD.AddressType;
					SET rOutAgencyAd.(XMLNSC.Attribute)Type = COALESCE(rEnv.Temp.AddUserType.EXTERNAL_CODE,'');
				
			WHEN (rInAD.AddressType = 'E MAIL') THEN
					
					SET rEnv.Temp.Email[] = SELECT EMAILTYP FROM rEnv.Temp.ADType[] AS EMAILTYP
									WHERE EMAILTYP.SW_CODE = 'EMAIL';
					SET rOutAgencyAd.(XMLNSC.Attribute)Type = COALESCE(rEnv.Temp.Email.EXTERNAL_CODE,'');
										
			END CASE;
			
			CASE 
				WHEN(rInAD.IsMailing = 'Y') THEN
				
					SET rEnv.Temp.Mail[] = SELECT MAILTYP FROM rEnv.Temp.ADType[] AS MAILTYP
									WHERE MAILTYP.SW_CODE = 'MAILING';
					SET rOutAgencyAd.(XMLNSC.Attribute)UseType = COALESCE(rEnv.Temp.Mail.EXTERNAL_CODE,'');
					
				WHEN(rInAD.IsShipping = 'Y') THEN
					
					SET rEnv.Temp.Sail[] = SELECT SAILTYP FROM rEnv.Temp.ADType[] AS SAILTYP
									WHERE SAILTYP.SW_CODE = 'SHIPPING';
					SET rOutAgencyAd.(XMLNSC.Attribute)UseType = COALESCE(rEnv.Temp.Sail.EXTERNAL_CODE,'');
			END CASE;
			
			IF (rInAD.Line1) IS NOT NULL THEN
				CREATE LASTCHILD OF rOutAgencyAd NAME 'AddressLine' VALUE rInAD.Line1;
				--SET rOutAgencyAd.AddressLine[1] = rInAD.Line1;
			END IF;
			IF (rInAD.Line2) IS NOT NULL THEN
				CREATE LASTCHILD OF rOutAgencyAd NAME 'AddressLine' VALUE rInAD.Line2;
				--SET rOutAgencyAd.AddressLine[2] = rInAD.Line2;
			END IF;
			IF (rInAD.Line3) IS NOT NULL THEN	
				CREATE LASTCHILD OF rOutAgencyAd NAME 'AddressLine' VALUE rInAD.Line3;
				--SET rOutAgencyAd.AddressLine[3] = rInAD.Line3;
			END IF;
			IF (rInAD.Line4) IS NOT NULL THEN	
				CREATE LASTCHILD OF rOutAgencyAd NAME 'AddressLine' VALUE rInAD.Line4;
			--	SET rOutAgencyAd.AddressLine[4] = rInAD.Line4;
			END IF;
			
			SET rOutAgencyAd.CityName = rInAD.City;
			SET rOutAgencyAd.PostalCode = rInAD.ZIP;
			SET rOutAgencyAd.StateProv.(XMLNSC.Attribute)StateCode = rInAD.State;
			SET rOutAgencyAd.CountryName.(XMLNSC.Attribute)Code = rInAD.Country;
			
		END FOR;
		
		--Logging Output Response
		
		DECLARE bPayload BLOB ASBITSTREAM(OutputRoot.XMLNSC CCSID 1208 ENCODING 546);
		
		IF LogPayload THEN
			CALL com.ncl.iib.log.AddPayloadLogEvent(bPayload, NodeLabel, 'Cruise Registration Resp..', 'xml', rEnv);
		END IF;
		
		SET OutputRoot.XMLNSC = NULL;
		SET OutputRoot.BLOB.BLOB = bPayload;
		
		RETURN TRUE;
	END;
END MODULE;

/* ------------------------------------------------------------------------------------
 *  ***********                            OWNER                              *********
 * ------------------------------------------------------------------------------------
 * COMPANY           :     Norwegian Cruise Line
 * PROJECT           :     WESB-AIS Migration
 * FLOW NAME         :     NCL_CruiseRegistration
 * MODULE NAME       :     CruiseRegistration_Exception
 * Description       :     This module takes care of exception handling
 * ------------------------------------------------------------------------------------
 *  ***********                      MODIFICATION HISTORY                     *********
 * ------------------------------------------------------------------------------------
 * Current Team Revision: $Revision$    

 * VERSION  CRNUM       DATE       Author        Descr of Revision
 * 1.0               11/26/2017   Prolifics      Initial version
 * 1.1        
 * ------------------------------------------------------------------------------------*/

CREATE COMPUTE MODULE NCL_CruiseRegistration_Exception
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
			DECLARE rEnv REFERENCE TO Environment.Variables;
			DECLARE cLocalTranId CHARACTER COALESCE(InputRoot.MQMD.MsgId, UUIDASCHAR);
			DECLARE bPayload BLOB ASBITSTREAM(InputRoot.XMLNSC CCSID 1208 ENCODING 546);

			SET cLocalTranId = TRANSLATE(cLocalTranId, 'X''', '');

			IF NOT EXISTS(Environment.Variables[]) THEN
				CREATE FIELD Environment.Variables AS rEnv;
			END IF;
			
			SET rEnv.Temp.Protocol = 'MQ';
		
			IF EXISTS(InputLocalEnvironment.Destination.CallableFlow.Reply.ReplyIdentifier[]) THEN
				SET rEnv.Temp.Protocol = 'CALLABLE';
			END IF;
			
			IF COALESCE(InputRoot.MQMD.ReplyToQ,'')='' THEN
				SET rEnv.TempHeaders.MQMD.ReplyToQ = DEFAULT_ReplyToQ;
			END IF;

			IF NOT EXISTS(rEnv.GTM.LogEvent[]) THEN
				CALL com.ncl.iib.log.CreateAuditLogEvent(rEnv, cLocalTranId, '', '');
				CALL com.ncl.iib.log.AddPayloadLogEvent(bPayload,NodeLabel,'Cruise Registration IIB Exception..','xml',rEnv);
			END IF;

			SET OutputRoot = InputRoot;

		RETURN TRUE;
	END;
END MODULE;

/* ------------------------------------------------------------------------------------
 *  ***********                            OWNER                              *********
 * ------------------------------------------------------------------------------------
 * COMPANY           :     Norwegian Cruise Line
 * PROJECT           :     WESB-AIS Migration
 * FLOW NAME         :     NCL_CruiseRegistration
 * MODULE NAME       :     CruiseRegistration_FaultHandler
 * Description       :     This module takes care of Generic Runtime Exceptions
 * ------------------------------------------------------------------------------------
 *  ***********                      MODIFICATION HISTORY                     *********
 * ------------------------------------------------------------------------------------
 * Current Team Revision: $Revision$    

 * VERSION  CRNUM       DATE       Author        Descr of Revision
 * 1.0               11/26/2017   Prolifics      Initial version
 * 1.1        
 * ------------------------------------------------------------------------------------*/

CREATE COMPUTE MODULE NCL_CruiseRegistration_FaultHandler
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 DECLARE rEnv,rOutReg REFERENCE TO Environment.Variables;
		 DECLARE rExcp REFERENCE TO InputExceptionList;
		 DECLARE cErrorText CHARACTER;
		 
		 CALL com.ncl.iib.log.AddLogEvent(NodeLabel, 'Generic Runtime Exceptions Cruise Registrations..', rEnv);
		 CALL com.ncl.iib.utils.getExceptionSummary(rEnv, rExcp);
		
		SET OutputRoot.MQMD = rEnv.TempHeaders.MQMD;
		SET OutputRoot.MQMD.ReplyToQ = rEnv.TempHeaders.MQMD.ReplyToQ;
		--CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE FIELD OutputRoot.XMLNSC.ns:NCL_CruiseRegistrationRS AS rOutReg;
				
		IF EXISTS(InputExceptionList.RecoverableException[])  THEN
				
				SET cErrorText = COALESCE(rEnv.ErrorSummary.ErrorText, '');
				
	 			SET rOutReg.ns:Errors.ns:Error = cErrorText;
				SET rOutReg.ns:Errors.ns:Error.(XMLNSC.Attribute)Code = '12228';
				SET rOutReg.ns:Errors.ns:Error.(XMLNSC.Attribute)ShortText = 'System error from back end. Please try again later';
				SET rOutReg.ns:Errors.ns:Error.(XMLNSC.Attribute)Type = '3';
		ELSE
				SET rOutReg.ns:Warnings.ns:Warning.(XMLNSC.Attribute)Code = '12228';
				SET rOutReg.ns:Warnings.ns:Warning.(XMLNSC.Attribute)ShortText = 'System error from back end. Please try again later.';
			
		END IF;
		
		RETURN TRUE;
	END;
END MODULE;


/* ------------------------------------------------------------------------------------
 *  ***********                            OWNER                              *********
 * ------------------------------------------------------------------------------------
 * COMPANY           :     Norwegian Cruise Line
 * PROJECT           :     WESB-AIS Migration
 * FLOW NAME         :     NCL_CruiseRegistration
 * MODULE NAME       :     CruiseRegistration_LogOut
 * Description       :     This module invokes Log Out API
 * ------------------------------------------------------------------------------------
 *  ***********                      MODIFICATION HISTORY                     *********
 * ------------------------------------------------------------------------------------
 * Current Team Revision: $Revision$    

 * VERSION  CRNUM       DATE       Author        Descr of Revision
 * 1.0               11/26/2017   Prolifics      Initial version
 * 1.1        
 * ------------------------------------------------------------------------------------*/

CREATE COMPUTE MODULE NCL_CruiseRegistration_LogOut
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE rEnv REFERENCE TO Environment.Variables;
		
		--Copying Response to Queue
		SET OutputRoot = InputRoot;
		PROPAGATE;
		
		--Calling LogOut API
		IF (rEnv.Temp.LogResp.sessionGUID) IS NOT NULL THEN
			
			-- add audit trail
			CALL com.ncl.iib.log.AddLogEvent(NodeLabel, 'Logging out of the session ...', rEnv);
			
			SET OutputRoot.XMLNSC.Logout_IN.MsgHeader.Version = com.ncl.ais.utils.GetVersonixAPIVersion();
			SET OutputRoot.XMLNSC.Logout_IN.MsgHeader.SessionGUID = rEnv.Temp.LogResp.sessionGUID;
			
			PROPAGATE TO LABEL 'LOGOUT';
		END IF;
		
		RETURN FALSE;
	END;
END MODULE;

/* ------------------------------------------------------------------------------------
 *  ***********                            OWNER                              *********
 * ------------------------------------------------------------------------------------
 * COMPANY           :     Norwegian Cruise Line
 * PROJECT           :     WESB-AIS Migration
 * FLOW NAME         :     NCL_CruiseRegistration
 * MODULE NAME       :     NCL_CruiseRegistration_SetEndpoint
 * Description       :     This module sets the Endpoint
 * ------------------------------------------------------------------------------------
 *  ***********                      MODIFICATION HISTORY                     *********
 * ------------------------------------------------------------------------------------
 * Current Team Revision: $Revision$    

 * VERSION  CRNUM       DATE       Author        Descr of Revision
 * 1.0               12/4/2018   Prolifics      Initial version
 * 1.1        
 * ------------------------------------------------------------------------------------*/
 
 CREATE COMPUTE MODULE NCL_CruiseRegistration_SetEndpoint
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		SET OutputRoot.MQMD = Environment.Variables.TempHeaders.MQMD;
		
		SET OutputRoot.MQMD.Format = MQFMT_RF_HEADER_2;
		SET OutputRoot.MQRFH2.usr.Endpoint = Environment.Variables.endPoint;

		IF EXISTS(InputRoot.BLOB.BLOB[]) THEN

			SET OutputRoot.BLOB.BLOB = InputRoot.BLOB.BLOB;
		ELSE
			SET OutputRoot.XMLNSC = InputRoot.XMLNSC;
		END IF;


		RETURN TRUE;
	END;
END MODULE;
 
