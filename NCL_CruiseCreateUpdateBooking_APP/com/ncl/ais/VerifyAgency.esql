BROKER SCHEMA com.ncl.ais

CREATE COMPUTE MODULE VerifyAgency_StoreRequest
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE rInLog REFERENCE TO OutputLocalEnvironment;
		DECLARE rEnv, rInmsg REFERENCE TO Environment.Variables;
		DECLARE rIn REFERENCE TO InputRoot.XMLNSC.*:NCL_CruiseCreateUpdateBookingRQ;
		DECLARE uuid CHARACTER UUIDASCHAR;
		-- Variables for Error Handler 
		DECLARE cLocalTranId CHARACTER InputRoot.MQMD.MsgId;
		
		CREATE FIELD Environment.Variables AS rEnv;
		
		SET rEnv.Stateless = TRUE;
		SET rEnv.Temp.CollectionPrefix = 'A';
		-- for keeping track of which code table is requested to be loaded to cache
		SET rEnv.Temp.CacheLoadRequested = '#';
		
		SET cLocalTranId = SUBSTRING(REPLACE(cLocalTranId, '''', '') FROM 2);
				
		-- create IIB log event
		CALL com.ncl.iib.log.CreateAuditLogEvent(rEnv, cLocalTranId, '', '');
			
		/** Backup Input message in environment **/	
		CREATE FIELD rEnv.InMsg AS rInmsg;
		CREATE LASTCHILD OF rInmsg DOMAIN('XMLNSC') NAME 'XMLNSC';
		SET rInmsg.XMLNSC = InputRoot.XMLNSC;
		
		-- Take backup in LocalEnvironment to mask sensitive information before logging
		CREATE LASTCHILD OF OutputLocalEnvironment AS rInLog DOMAIN('XMLNSC') NAME 'XMLNSC';
		SET rInLog.sc:NCL_CruiseCreateUpdateBookingRQ = rInmsg.XMLNSC.*:NCL_CruiseCreateUpdateBookingRQ;
		
		FOR rInLogPaymentOpt AS rInLog.*:NCL_CruiseCreateUpdateBookingRQ.*:ReservationInfo.*:PaymentOptions.*:PaymentOption[] 
		DO
			IF LENGTH(COALESCE(FIELDVALUE(rInLogPaymentOpt.*:PaymentCard.(XMLNSC.Attribute)CardNumber),'')) > 0 THEN
				SET rInLogPaymentOpt.*:PaymentCard.(XMLNSC.Attribute)CardNumber = 'XXXXXXXXXXXXXXXX';
			END IF;
		END FOR;
		
		CALL com.ncl.iib.log.CreateMetaDataSet(COALESCE(rIn.*:POS.*:Source.*:RequestorID.(XMLNSC.Attribute)ID, COALESCE(rIn.*:POS.*:Source.(XMLNSC.Attribute)PseudoCityCode, '')),
                                               COALESCE(rIn.*:POS.*:Source.*:BookingChannel.*:CompanyName.(XMLNSC.Attribute)Code, ''),
                                               COALESCE(rIn.*:ReservationInfo.*:ReservationID.(XMLNSC.Attribute)ID,''),
                                               '',
                                               COALESCE(rIn.*:SailingInfo.*:SelectedSailing.(XMLNSC.Attribute)VoyageID,''),
                                               rEnv);
		
		IF (LogPayLoad) THEN
			DECLARE bPayload BLOB ASBITSTREAM(rInLog CCSID 1208 ENCODING 546);
			CALL com.ncl.iib.log.AddPayloadLogEvent(bPayload, NodeLabel, 'CruiseCreateUpdateBooking callable request message', 'xml', rEnv);
		END IF;
		
		-- Check if Reservation ID is provided in input
		SET rEnv.InResID = FIELDVALUE(rIn.*:ReservationInfo.*:ReservationID.(XMLNSC.Attribute)ID);
		SET rEnv.ResID = FIELDVALUE(rIn.*:ReservationInfo.*:ReservationID.(XMLNSC.Attribute)ID);

		-- Check if Service invoked in stateless or stateful mode.
		IF EXISTS(rIn.*:SessionId.*:SessionToken[])
		THEN
			SET rEnv.Stateless = FALSE;
			/*SET rEnv.sessionID = rIn.*:SessionId.*:SessionToken;
			
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;*/
		END IF;

		SET rEnv.Temp.State = InputLocalEnvironment.Service.State;
		
		-- get cached or local session based on state
		IF InputLocalEnvironment.Service.State = 'STATEFUL' THEN
			CALL com.ncl.iib.log.AddLogEvent(NodeLabel, 'Calling GetSessionToken to get cached session ...', rEnv);

			DECLARE rOut REFERENCE TO OutputRoot;				
			CREATE FIELD OutputRoot.XMLNSC.sc:NCL_CruiseGetSessionTokenRQ AS rOut;
			
			SET rOut.sc:POS = rIn.*:POS;
			SET rOut.sc:GetOrCreateSession = 'Y';
			SET rOut.sc:ReservationId = rEnv.ResID;

			PROPAGATE TO TERMINAL 'out1';
		ELSE
			CALL com.ncl.iib.log.AddLogEvent(NodeLabel, 'Calling VerifyAgency to get session ...', rEnv);

			-- create verify agency request
			SET OutputRoot.XMLNSC.VerifyAgencyRequest.source = rIn.*:POS.*:Source;
			
			RETURN TRUE;
		END IF;

		RETURN FALSE;
	END;
	
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;

		SET J = CARDINALITY(InputRoot.*[]);

		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
END MODULE;


CREATE COMPUTE MODULE VerifyAgency_CallLoadBooking
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE rEnv,rResp,rEnvXmlNsc,rVXReq,rOut,rSailingInfo REFERENCE TO Environment.Variables;
		DECLARE rIn,rLdBkng REFERENCE TO InputRoot.XMLNSC.VerifyAgencyResponse;
		DECLARE bPayload BLOB;
		DECLARE rEnvInMsg REFERENCE TO rEnv.InMsg.XMLNSC.*:NCL_CruiseCreateUpdateBookingRQ;
		DECLARE rGuestDetails REFERENCE TO rEnvInMsg.*:ReservationInfo.*:GuestDetails;
		CREATE LASTCHILD OF rEnv AS rEnvXmlNsc DOMAIN('XMLNSC') NAME 'XMLNSC';
		
		
		SET rEnv.Temp.collectionID = CollectionPrefixToID(rGuestDetails, rEnv.Temp.CollectionPrefix);
		SET rEnv.TempCollection.collectionID = rEnv.Temp.collectionID;
		
		--IF rEnv.Stateless THEN
		IF EXISTS(InputRoot.XMLNSC.VerifyAgencyResponse[]) THEN
			MOVE rIn TO InputRoot.XMLNSC.VerifyAgencyResponse;
			
			-- Log the ValidateBookingSource Response payload
			CALL com.ncl.iib.log.AddLogEvent(NodeLabel, 'Response received from ValidateBookingSource service ...', rEnv);
			
			IF EXISTS(rIn.sessionGUID[]) 
			THEN
				SET rEnv.sessionID = rIn.sessionGUID;
				SET rEnv.agencyID = rIn.agencyID;
				SET rEnv.officeCode = COALESCE(rIn.officeCode, '');
				SET rEnv.endPoint = rIn.endpoint;
			ELSE
				-- if verify agency is being invoked
				IF EXISTS(rIn.agencyNotFound[]) OR EXISTS(rIn.loginError[]) THEN
					-- add audit trail
					CALL com.ncl.iib.log.AddLogEvent(NodeLabel, 'Verify agency failed ...', rEnv);
				
					CREATE FIELD OutputRoot.XMLNSC.sc:NCL_CruiseCreateUpdateBookingRS AS rOut;
				
					CALL com.ncl.ais.utils.CopyAttributes(rEnvInMsg, rOut);
			
					IF EXISTS(rIn.agencyNotFound[]) THEN
						SET rOut.sc:Warnings.sc:Warning = rIn.agencyNotFound;
					ELSE
						SET rOut.sc:Warnings.sc:Warning = rIn.loginError;
					END IF;

					CREATE LASTCHILD OF rOut AS rSailingInfo IDENTITY sc:SailingInfo;
					SET rSailingInfo = 	rEnvInMsg.*:SailingInfo;		
				ELSEIF EXISTS(rIn.runtimeError[]) THEN
					-- add audit trail
					CALL com.ncl.iib.log.AddLogEvent(NodeLabel, 'Verify agency failed ...', rEnv);

					CREATE FIELD OutputRoot.XMLNSC.sc:NCL_CruiseCreateUpdateBookingRS AS rOut;	
					CALL com.ncl.ais.utils.CopyAttributes(rEnvInMsg, rOut);
					SET rOut.sc:Errors.sc:Error = rIn.runtimeError;
				END IF; 
			
				PROPAGATE TO LABEL 'ROUTETOCALLER';
				RETURN FALSE;	
			END IF;
		ELSEIF EXISTS(InputRoot.XMLNSC.*:NCL_CruiseGetSessionTokenRS[]) THEN
			MOVE rIn TO InputRoot.XMLNSC.*:NCL_CruiseGetSessionTokenRS;
			
			IF EXISTS(rIn.*:Errors[]) THEN
				-- add audit trail
				CALL com.ncl.iib.log.AddLogEvent(NodeLabel, 'Get session token failed ...', rEnv);

				CREATE FIELD OutputRoot.XMLNSC.sc:NCL_CruiseCreateUpdateBookingRS AS rOut;	
				CALL com.ncl.ais.utils.CopyAttributes(rEnvInMsg, rOut);
				SET rOut.sc:Errors = rIn.*:Errors;

				PROPAGATE TO LABEL 'ROUTETOCALLER';
				RETURN FALSE;	
			ELSE
				SET rEnv.sessionID = rIn.SessionInfo.SessionToken;
				SET rEnv.agencyID = rIn.agencyID;
				SET rEnv.officeCode = COALESCE(rIn.officeCode, '');
				SET rEnv.endPoint = rIn.SessionInfo.Endpoint;				
			END IF;
		END IF;
		
		IF rEnv.InResID IS NOT NULL
		THEN
			PROPAGATE TO TERMINAL 'out2';
			RETURN FALSE;
		END IF;
		
		-- Add a check here to validate if VoyageID exists. For resID not provided in input, VoyageID is mandatory
		IF com.ncl.ais.utils.IsEmpty(rEnvInMsg.*:SailingInfo.*:SelectedSailing.(XMLNSC.Attribute)VoyageID) 
			OR NOT com.ncl.ais.utils.isNumeric(rEnvInMsg.*:SailingInfo.*:SelectedSailing.(XMLNSC.Attribute)VoyageID)
		THEN			
			THROW USER EXCEPTION MESSAGE 2951 VALUES('VoyageID Value: ' || rEnvInMsg.*:SailingInfo.*:SelectedSailing.(XMLNSC.Attribute)VoyageID || ' is invalid') ;												
		ELSE
			-- set the endpoint of the VX server
			SET OutputRoot.HTTPRequestHeader."x-upstream" = rEnv.endPoint;
			IF rEnv.Temp.collectionID > 0 THEN
				PROPAGATE TO LABEL 'SEARCH_RQ';
				IF NOT EXISTS(rEnv.Temp.collectionResId[]) THEN
					CREATE FIELD OutputRoot.XMLNSC.sc:NCL_CruiseCreateUpdateBookingRS AS rOut;	
					CALL com.ncl.ais.utils.CopyAttributes(rEnvInMsg, rOut);					
					SET rOut.sc:Warnings.sc:Warning.(XMLNSC.Attribute)ShortText='RQ not available for requested category';
					SET rOut.sc:Warnings.sc:Warning.(XMLNSC.Attribute)Code='45011';
					SET rOut.sc:Warnings.sc:Warning.(XMLNSC.Attribute)Type = '3';
					PROPAGATE TO LABEL 'ROUTETOCALLER';
					RETURN FALSE;	
				END IF;			
			END IF;
			
			-- Prepare the request message to call Versonix LoadBooking API
			CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
			DECLARE rSource REFERENCE TO rEnvInMsg.*:POS.*:Source;
			CREATE FIELD OutputRoot.XMLNSC.LoadBooking_IN AS rLdBkng;
			CALL com.ncl.ais.utils.CreateVersonixHeader(rEnv.sessionID,rLdBkng);
--			SET rLdBkng.MsgHeader.Version = VersonixAPIVersion;
--			SET rLdBkng.MsgHeader.SessionGUID = rEnv.sessionID;
			SET rLdBkng.MsgHeader.CallerInfo.ExtSystemInfo.SourceCode = FIELDVALUE(rSource.*:BookingChannel.*:CompanyName.(XMLNSC.Attribute)Code);
			
			SET rLdBkng.StateKey = com.ncl.ais.utils.BuildStateKey(rSource.*:BookingChannel.*:CompanyName.(XMLNSC.Attribute)Code,
															rSource.(XMLNSC.Attribute)PseudoCityCode, rSource.*:RequestorID.(XMLNSC.Attribute)ID,
															rEnvInMsg.*:SailingInfo.*:SelectedCategory.*:SelectedCabin.(XMLNSC.Attribute)CabinNumber,
															rEnvInMsg.*:SailingInfo.*:SelectedSailing.(XMLNSC.Attribute)VoyageID);

			CALL com.ncl.iib.log.AddLogEvent(NodeLabel, 'Invoking LoadBooking API in VerifyAgency subflow...', rEnv);
	
			RETURN TRUE;
		END IF;	
	END;
END MODULE;


CREATE COMPUTE MODULE VerifyAgency_LoadBookingResp
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE rEnv REFERENCE TO Environment.Variables;
		DECLARE rEnvInMsg REFERENCE TO rEnv.InMsg.XMLNSC.*:NCL_CruiseCreateUpdateBookingRQ;
		DECLARE rGuestDetails REFERENCE TO rEnvInMsg.*:ReservationInfo.*:GuestDetails;
		DECLARE rIn REFERENCE TO InputRoot.XMLNSC.LoadBooking_OUT;
		
		CALL com.ncl.iib.log.AddLogEvent(NodeLabel, 'LoadBooking API Response received in VerifyAgency subflow...', rEnv);

		--SET rEnv.LBResID = rIn.ResShell.ResHeader.ResID;	
		SET rEnv.ResID = rIn.ResShell.ResHeader.ResID;	
	
		RETURN TRUE;
	END;

END MODULE;

