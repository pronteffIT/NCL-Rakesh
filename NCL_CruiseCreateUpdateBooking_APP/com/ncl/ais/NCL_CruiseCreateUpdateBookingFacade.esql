BROKER SCHEMA com.ncl.ais

DECLARE DEFAULT_REPLYQ EXTERNAL CHARACTER 'NCL_CRUISE_CREATE_UPDATE_BOOKING_RESP';
DECLARE MSG_EXPIRY EXTERNAL INTEGER 3000;
DECLARE LogPayLoad EXTERNAL BOOLEAN;

CREATE COMPUTE MODULE NCL_CruiseCreateUpdateBookingFacade_StoreAndRoute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE rEnv, rOut, rPayments REFERENCE TO Environment.Variables;
		DECLARE rIn REFERENCE TO InputRoot.XMLNSC.*[<];
		DECLARE uuid CHARACTER UUIDASCHAR;
		DECLARE cLocalTranId CHARACTER InputRoot.MQMD.MsgId;
		DECLARE cLogMsg CHARACTER 'CruiseCreateUpdateBooking request message';
		DECLARE cRoot CHARACTER FIELDNAME(InputRoot.XMLNSC.*[<]);

		CREATE FIELD Environment.Variables AS rEnv;

		CREATE LASTCHILD OF rEnv.Temp DOMAIN('XMLNSC') NAME 'Message';
		SET rEnv.Temp.Message = InputRoot.XMLNSC;
		SET rEnv.StatelessReq = TRUE;
		
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';	
	
		IF EXISTS(InputRoot.XMLNSC.*:NCL_CruiseStatefulCreateUpdateBookingRQ[]) THEN
			SET OutputLocalEnvironment.Service.State = 'STATEFUL';
			
			SET rEnv.StatelessReq = FALSE;
			CALL CopyMessageHeaders();
			
			CREATE LASTCHILD OF OutputRoot.XMLNSC AS rOut IDENTITY sc:NCL_CruiseCreateUpdateBookingRQ;
			CALL com.ncl.ais.utils.CopyAttributes(InputRoot.XMLNSC.*:NCL_CruiseStatefulCreateUpdateBookingRQ, rOut);
			
			SET rOut = InputRoot.XMLNSC.*:NCL_CruiseStatefulCreateUpdateBookingRQ;
			SET cLogMsg = 'CruiseStatefulCreateUpdateBooking request message';
		ELSE
			SET OutputLocalEnvironment.Service.State = 'STATELESS';			
			CALL CopyEntireMessage();
		END IF;		
	
		SET cLocalTranId = SUBSTRING(REPLACE(cLocalTranId, '''', '') FROM 2);
		
		--add payload metadataset
		CALL com.ncl.iib.log.CreateAuditLogEvent(rEnv, cLocalTranId, '', '');
		CALL com.ncl.iib.log.CreateMetaDataSet(COALESCE(rIn.*:POS.*:Source.*:RequestorID.(XMLNSC.Attribute)ID, COALESCE(rIn.*:POS.*:Source.(XMLNSC.Attribute)PseudoCityCode, '')),
												COALESCE(rIn.*:POS.*:Source.*:BookingChannel.*:CompanyName.(XMLNSC.Attribute)Code, ''),
												COALESCE(rIn.*:ReservationInfo.*:ReservationID.(XMLNSC.Attribute)ID, ''),
												'',
												COALESCE(rIn.*:SailingInfo.*:SelectedSailing.(XMLNSC.Attribute)VoyageID, ''),
											 	rEnv);

		-- Backup the MQMD details
		SET rEnv.MQMD = InputRoot.MQMD;
		-- Set Message expiry to configured value
		SET rEnv.MQMD.Expiry = MSG_EXPIRY;
		SET rEnv.MQMD.Format = MQFMT_STRING;
		SET OutputRoot.MQMD.Expiry = MSG_EXPIRY;
		SET OutputRoot.MQMD.Format = MQFMT_STRING;
			
		-- If no Reply To Queue mentioned, default to the queue defined in UDP	
		IF LENGTH(TRIM(InputRoot.MQMD.ReplyToQ)) = 0 
		THEN				
			SET rEnv.MQMD.ReplyToQ = DEFAULT_REPLYQ;
			SET OutputRoot.MQMD.ReplyToQ = DEFAULT_REPLYQ;
		END IF; 	
		
		MOVE rPayments TO rEnv.Temp.Message.{cRoot}.*:ReservationInfo.*:PaymentOptions;
		             
		FOR rInLogPaymentOpt AS rPayments.*:PaymentOption[] DO
			IF EXISTS(rInLogPaymentOpt.*:PaymentCard.(XMLNSC.Attribute)CardNumber[]) THEN
				SET rInLogPaymentOpt.*:PaymentCard.(XMLNSC.Attribute)CardNumber = 'XXXXXXXXXXXXXXXX';
				--SET rInLogPaymentOpt.*:PaymentCard.(XMLNSC.Attribute)ExpireDate = 'XXXX';
			END IF;		
		END FOR;
		
		IF(LogPayLoad) THEN
			DECLARE bPayload BLOB ASBITSTREAM(rEnv.Temp.Message CCSID 1208 ENCODING 546);
			CALL com.ncl.iib.log.AddPayloadLogEvent(bPayload, NodeLabel, cLogMsg, 'xml', rEnv);
		END IF;
			
		RETURN TRUE;
	END;
	
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
	
	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE NCL_CruiseCreateUpdateBookingFacade_TransformResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE rEnv,rOut REFERENCE TO Environment.Variables;
		DECLARE rIn REFERENCE TO InputRoot.XMLNSC.*:NCL_CruiseCreateUpdateBookingRS;		
		DECLARE cLogMsg CHARACTER 'CruiseCreateUpdateBooking response message';
		
		--CREATE LASTCHILD OF OutputRoot DOMAIN('MQMD') NAME 'MQMD';
		SET OutputRoot.MQMD = rEnv.MQMD;
		SET OutputRoot.MQMD.Format = MQFMT_RF_HEADER_2;
		
		SET OutputRoot.MQRFH2.usr.Endpoint = rIn.Endpoint;
		
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';

		IF rEnv.StatelessReq = TRUE THEN
			--CALL CopyEntireMessage();
			CREATE LASTCHILD OF OutputRoot.XMLNSC AS rOut IDENTITY sc:NCL_CruiseCreateUpdateBookingRS;
		ELSE
			CREATE LASTCHILD OF OutputRoot.XMLNSC AS rOut IDENTITY sc:NCL_CruiseStatefulCreateUpdateBookingRS;
			--CALL com.ncl.ais.utils.CopyAttributes(rIn, rOut);			
			--SET rOut = rIn;			
			SET cLogMsg = 'CruiseStatefulCreateUpdateBooking response message';
		END IF;

		--SET OutputRoot.Properties = NULL;
		CALL com.ncl.ais.utils.CopyAttributes(rIn, rOut);
		SET rOut = rIn;
		SET rOut.(XMLNSC.Attribute)Endpoint = NULL;
			
		DECLARE bPayload BLOB ASBITSTREAM(OutputRoot.XMLNSC CCSID 1208 ENCODING 546);
		
		IF(LogPayLoad) THEN
			CALL com.ncl.iib.log.AddPayloadLogEvent(bPayload, NodeLabel, cLogMsg, 'xml', rEnv);
		END IF;
		
		-- Make the output message as BLOB to avoid XML parsing errors that show up for native character data
		SET OutputRoot.XMLNSC = NULL;
		SET OutputRoot.BLOB.BLOB = bPayload;
				
		RETURN TRUE;
	END;
	
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE NCL_CruiseCreateUpdateBookingFacade_HandleException
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE rEnv REFERENCE TO Environment.Variables;
		DECLARE cLocalTranId CHARACTER COALESCE(InputRoot.MQMD.MsgId, UUIDASCHAR);
		
		SET cLocalTranId = TRANSLATE(cLocalTranId, 'X''', '');
		
		IF NOT EXISTS(Environment.Variables[]) THEN 
			CREATE FIELD Environment.Variables AS rEnv;
		END IF;
		
		IF NOT EXISTS(rEnv.GTM.LogEvent[]) THEN
			CALL com.ncl.iib.log.CreateAuditLogEvent(rEnv, cLocalTranId, '', '');
		END IF;
		
		SET OutputRoot = InputRoot;
		
		-- If message errored out before hitting the first compute node, store the MQMD details in Env here
		IF NOT EXISTS(rEnv.MQMD[]) THEN
			SET rEnv.MQMD = InputRoot.MQMD;
			SET rEnv.MQMD.Expiry = MSG_EXPIRY;
			SET rEnv.MQMD.Format = MQFMT_STRING;
			
			-- If no Reply To Queue mentioned, default to the queue defined in UDP	
			IF LENGTH(TRIM(InputRoot.MQMD.ReplyToQ)) = 0 
			THEN				
				SET rEnv.MQMD.ReplyToQ = DEFAULT_REPLYQ;
			END IF;				
	
			IF EXISTS(InputRoot.XMLNSC.*:NCL_CruiseStatefulCreateUpdateBookingRQ[]) THEN
				SET rEnv.StatelessReq = FALSE;
			ELSE
				SET rEnv.StatelessReq = TRUE;
			END IF;
		END IF;		
		
		RETURN TRUE;
	END;
END MODULE;


CREATE COMPUTE MODULE NCL_CruiseCreateUpdateBookingFacade_RuntimeError
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE rOut,rEnv REFERENCE TO Environment.Variables;
		DECLARE rExcp REFERENCE TO InputExceptionList;
		DECLARE rEnvIn REFERENCE TO rEnv.InMsg.XMLNSC.*[1];
		DECLARE cLogMsg CHARACTER 'CruiseCreateUpdateBooking response message';		
		
		--DECLARE rOut REFERENCE TO OutputRoot.XMLNSC.sc:NCL_CruiseCreateUpdateBookingRS;

		/*DECLARE cErrorText CHARACTER 'Internal IIB Error, please check the logs';		
		
		-- extract error details from exception tree
		IF EXISTS(InputExceptionList.RecoverableException[]) THEN
			CALL com.ncl.iib.utils.getExceptionSummary(rEnv, rExcp);
			SET cErrorText = COALESCE(rEnv.ErrorSummary.ErrorText, '');
			
			CALL com.ncl.iib.log.UpdateAuditLogEventWithError('', rEnv);
		END IF;
		

		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS rOut IDENTITY sc:NCL_CruiseCreateUpdateBookingRS;

		CALL com.ncl.ais.utils.CopyAttributes(rEnvIn, rOut);
		
		SET rOut.sc:Errors.sc:Error = cErrorText;		
		SET rOut.sc:Errors.sc:Error.(XMLNSC.Attribute)Code = '12228';
		SET rOut.sc:Errors.sc:Error.(XMLNSC.Attribute)ShortText = 'System Internal Error';
		SET rOut.sc:Errors.sc:Error.(XMLNSC.Attribute)Type = '3';
		
		--DECLARE bPayload BLOB ASBITSTREAM(OutputRoot.XMLNSC CCSID 1208 ENCODING 546);
		--CALL com.ncl.iib.log.AddPayloadLogEvent(bPayload, NodeLabel, 'CruiseCreateUpdateBooking response message', 'xml', rEnv);
		*/
		
		DECLARE cErrorText CHARACTER 'System error from back end. Please try again later';
		--DECLARE outMsgName CHARACTER rEnv.Temp.InputMessageName || 'RS';
		
		-- extract error details from exception tree
		IF EXISTS(InputExceptionList.RecoverableException[]) THEN
			CALL com.ncl.iib.utils.getExceptionSummary(rEnv, rExcp);
			SET cErrorText = COALESCE(rEnv.ErrorSummary.ErrorText, '');
			
			CALL com.ncl.iib.log.UpdateAuditLogEventWithError('', rEnv);
		END IF;
		
		--CREATE FIRSTCHILD OF OutputRoot DOMAIN('MQMD') NAME 'MQMD';
		SET OutputRoot.MQMD = rEnv.MQMD;
		
		IF rEnv.StatelessReq = TRUE 
		THEN
			CREATE LASTCHILD OF OutputRoot.XMLNSC AS rOut IDENTITY sc:NCL_CruiseCreateUpdateBookingRS;
		ELSE
			CREATE LASTCHILD OF OutputRoot.XMLNSC AS rOut IDENTITY sc:NCL_CruiseStatefulCreateUpdateBookingRS;
			SET cLogMsg = 'CruiseStatefulCreateUpdateBooking response message';
		END IF;
		
		--CALL com.ncl.ais.utils.CopyAttributes(rOrgMsg, rOut);
		CALL com.ncl.ais.utils.CopyAttributes(rEnvIn, rOut);
		
		SET rOut.sc:Errors.sc:Error.(XMLNSC.Attribute)Code = '12228';
		SET rOut.sc:Errors.sc:Error.(XMLNSC.Attribute)ShortText = 'System error from back end. Please try again later';
		SET rOut.sc:Errors.sc:Error.(XMLNSC.Attribute)Type = '3';
		SET rOut.sc:Errors.sc:Error = cErrorText;

		DECLARE bPayload BLOB ASBITSTREAM(OutputRoot.XMLNSC CCSID 1208 ENCODING 546);
		
		IF (LogPayLoad) THEN
			CALL com.ncl.iib.log.AddPayloadLogEvent(bPayload, NodeLabel, cLogMsg, 'xml', rEnv);
		END IF;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

