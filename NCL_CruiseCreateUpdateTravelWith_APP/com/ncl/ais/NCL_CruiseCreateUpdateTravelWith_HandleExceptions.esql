BROKER SCHEMA com.ncl.ais

CREATE COMPUTE MODULE NCL_CruiseCreateUpdateTravelWith_HandleExceptions
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
	DECLARE rEnv,rResp REFERENCE TO Environment.Variables;
		DECLARE rExcp REFERENCE TO InputExceptionList;

		DECLARE rMsgId CHARACTER COALESCE(InputRoot.MQMD.MsgId, UUIDASCHAR);
		SET rMsgId = TRANSLATE(rMsgId, 'X''', '');

		CALL CopyMessageHeaders();
		-- If no Reply To Queue mentioned, default to the queue defined in UDP
		IF LENGTH(TRIM(InputRoot.MQMD.ReplyToQ)) = 0 THEN
			SET OutputRoot.MQMD.ReplyToQ = DEFAULT_REPLYQ;
		END IF;		
		
		IF NOT EXISTS(Environment.Variables[]) THEN
			CREATE FIELD Environment.Variables AS rEnv;
		END IF;
 
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS rResp IDENTITY *:NCL_CruiseCreateUpdateTravelWithRS;
		-- Copy root level attributes from environment if the Input Message was stored
		IF EXISTS (rEnv.Temp.Message.*:NCL_CruiseCreateUpdateTravelWithRQ[]) THEN
			DECLARE RefInReq REFERENCE TO rEnv.Temp.Message.*:NCL_CruiseCreateUpdateTravelWithRQ;
			CALL com.ncl.ais.utils.CopyAttributes (RefInReq,rResp);
		END IF;
 
		IF EXISTS(InputExceptionList.RecoverableException[]) THEN
			CALL com.ncl.iib.utils.getExceptionSummary(rEnv, rExcp);
		END IF;

		DECLARE cErrorText CHARACTER COALESCE(rEnv.ErrorSummary.ErrorText, 'Internal IIB Error, please check the logs');

		SET rResp.*:Errors.*:Error = cErrorText;
		SET rResp.*:Errors.*:Error.(XMLNSC.Attribute)Code = '12228';
		SET rResp.*:Errors.*:Error.(XMLNSC.Attribute)ShortText = 'System error from back end. Please try again later';
		SET rResp.*:Errors.*:Error.(XMLNSC.Attribute)Type = '3';
		--@jag
		PROPAGATE TO LABEL 'ROUTETOCALLER';
		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
