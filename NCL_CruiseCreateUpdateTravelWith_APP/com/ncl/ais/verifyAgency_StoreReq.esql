BROKER SCHEMA com.ncl.ais

DECLARE ExternalCodeType EXTERNAL CHARACTER 'AdvisoryCondition';
DECLARE InsCodeType EXTERNAL CHARACTER 'Insurance';
DECLARE MSG_EXPIRY EXTERNAL INTEGER 3000;
DECLARE DEFAULT_REPLYQ EXTERNAL CHARACTER 'NCL_CRUISE_CREATE_UPDATE_TRAVELWITH_RESP';

CREATE COMPUTE MODULE verifyAgency_StoreReq
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
	--	DECLARE rOrgMsgLog REFERENCE TO OutputLocalEnvironment;
		DECLARE rEnv REFERENCE TO Environment.Variables;
		DECLARE uuid CHARACTER UUIDASCHAR;
		DECLARE rAction CHARACTER '';
		DECLARE cLocalTranId CHARACTER InputRoot.MQMD.MsgId;
		
		SET cLocalTranId = SUBSTRING(REPLACE(cLocalTranId, '''', '') FROM 2);
		
		CREATE FIELD Environment.Variables AS rEnv;
		CREATE LASTCHILD OF rEnv.Temp DOMAIN('XMLNSC') NAME 'Message';
		SET rEnv.Temp.Message = InputRoot.XMLNSC;
		DECLARE rOrgMsg REFERENCE TO rEnv.Temp.Message.*:NCL_CruiseCreateUpdateTravelWithRQ;
		

		-- Backup the MQMD details
		SET rEnv.MQMD = InputRoot.MQMD;
		-- Set Message expiry to configured value
		SET rEnv.MQMD.Expiry = MSG_EXPIRY;
		SET rEnv.MQMD.Format = MQFMT_STRING;
		SET OutputRoot.MQMD.Expiry = MSG_EXPIRY;
		SET OutputRoot.MQMD.Format = MQFMT_STRING;
			
		-- If no Reply To Queue mentioned, default to the queue defined in UDP	
		IF LENGTH(TRIM(InputRoot.MQMD.ReplyToQ)) = 0 
		THEN				
			SET rEnv.MQMD.ReplyToQ = DEFAULT_REPLYQ;
			SET OutputRoot.MQMD.ReplyToQ = DEFAULT_REPLYQ;
		END IF; 	
		
		DECLARE rOut REFERENCE TO OutputRoot;		
		
		-- Preserving TW Action
		SET rAction = FIELDVALUE(rOrgMsg.*:TravelWithInfo.(XMLNSC.Attribute)TWAction);
		SET Environment.Variables.TwAction = rAction;
		--	Check of the required TravelWith informaiton present in the request.
		IF NOT EXISTS(rOrgMsg.*:TravelWithInfo.*:TWDetail.*:Bookings.*:TWResInfo[]) THEN			
		 	CREATE FIELD OutputRoot.XMLNSC.*:NCL_CruiseCreateUpateTravelWithRS AS rOut;		
			CALL com.ncl.ais.utils.CopyAttributes(rOrgMsg, rOut);							
			SET rOut.*:Errors.*:Error = 'TravelWith Details Action Missing missing in the request';
			PROPAGATE TO LABEL 'ROUTETOCALLER';				
			RETURN FALSE;
		END IF;				
		-- 	This is a stateless service at this time.			
		--CALL com.ncl.iib.log.AddLogEvent(NodeLabel, 'Calling VerifyAgency to get session ...', rEnv);
		SET OutputRoot.XMLNSC.VerifyAgencyRequest.source = rOrgMsg.*:POS.*:Source;	
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
