DECLARE MaxRetries EXTERNAL INTEGER 3;
DECLARE PoisonQueue EXTERNAL CHARACTER 'CASINO_POISON_IN';
DECLARE BatchSize EXTERNAL INTEGER 0;
DECLARE MessageExpiry EXTERNAL INTEGER 36000;

/* ------------------------------------------------------------------------------------
 *  ***********                            OWNER                              *********
 * ------------------------------------------------------------------------------------
 * COMPANY           :     NCL
 * PROJECT           :     Casino Data Migration
 * FLOW NAME         :     Casino_ErrorReprocess
 * MODULE NAME       :     Read_Messages
 * Description       :     This module reads error messages using MQGet node in a loop.
 * ------------------------------------------------------------------------------------
 *  ***********                      MODIFICATION HISTORY                     *********
 * ------------------------------------------------------------------------------------
 * Current Team Revision: $Revision$    

 * VERSION  CRNUM       DATE       Author        Descr of Revision
 * 1.0               04/03/2017   Prolifics      Initial version
 * 1.1        
 * 1.2        
 * ------------------------------------------------------------------------------------*/
CREATE COMPUTE MODULE Read_Messages
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE rEv REFERENCE TO Environment.Variables;
		DECLARE index INTEGER 1;
		
		IF NOT LASTMOVE(rEv) THEN
			CREATE FIELD Environment.Variables AS rEv;
		END IF;
		
		SET rEv.AllMessagesRead = 'false';
		
		WHILE rEv.AllMessagesRead = 'false' AND index <= BatchSize DO
			PROPAGATE TO TERMINAL 'out';
			
			SET index = index + 1;
		END WHILE;
		
		RETURN FALSE;
	END;
END MODULE;

/* ------------------------------------------------------------------------------------
 *  ***********                            OWNER                              *********
 * ------------------------------------------------------------------------------------
 * COMPANY           :     NCL
 * PROJECT           :     Casino Data Migration
 * FLOW NAME         :     Casino_ErrorReprocess
 * MODULE NAME       :     SetDestinationQueue
 * Description       :     This module sets Queue destination list.
 * ------------------------------------------------------------------------------------
 *  ***********                      MODIFICATION HISTORY                     *********
 * ------------------------------------------------------------------------------------
 * Current Team Revision: $Revision$    

 * VERSION  CRNUM       DATE       Author        Descr of Revision
 * 1.0               04/03/2017   Prolifics      Initial version
 * 1.1        
 * 1.2        
 * ------------------------------------------------------------------------------------*/
CREATE COMPUTE MODULE SetDestinationQueue
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE rRfhUsr REFERENCE TO InputRoot.MQRFH2.usr;
		
		SET OutputRoot = InputRoot;
		SET OutputLocalEnvironment = InputLocalEnvironment;

		/*IF CONTAINS(rRfhUsr.ErrorText, 'Reservation guest not found in Salesforce to perform delete') THEN
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = PoisonQueue;
			--SET OutputRoot.MQMD.Expiry = MessageExpiry;
			
			DELETE FIELD OutputRoot.MQRFH2.mcd;		
			PROPAGATE TO TERMINAL 'out1' FINALIZE NONE;
		ELSE
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = rRfhUsr.SourceQueue;

			DELETE FIELD OutputRoot.MQRFH2.mcd;		
			PROPAGATE FINALIZE NONE;
		END IF;*/

		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = rRfhUsr.SourceQueue;
		
		DELETE FIELD OutputRoot.MQRFH2.mcd;		
		PROPAGATE FINALIZE NONE;

		RETURN FALSE;
	END;
END MODULE;


/* ------------------------------------------------------------------------------------
 *  ***********                            OWNER                              *********
 * ------------------------------------------------------------------------------------
 * COMPANY           :     NCL
 * PROJECT           :     Casino Data Migration
 * FLOW NAME         :     Casino_ErrorReprocess
 * MODULE NAME       :     SetFlag
 * Description       :     This module sets flag to indicate all messages are read.
 * ------------------------------------------------------------------------------------
 *  ***********                      MODIFICATION HISTORY                     *********
 * ------------------------------------------------------------------------------------
 * Current Team Revision: $Revision$    

 * VERSION  CRNUM       DATE       Author        Descr of Revision
 * 1.0               04/03/2017   Prolifics      Initial version
 * 1.1        
 * 1.2        
 * ------------------------------------------------------------------------------------*/
CREATE COMPUTE MODULE SetFlag
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET Environment.Variables.AllMessagesRead = 'true';
		
		RETURN TRUE;
	END;
END MODULE;


/* ------------------------------------------------------------------------------------
 *  ***********                            OWNER                              *********
 * ------------------------------------------------------------------------------------
 * COMPANY           :     NCL
 * PROJECT           :     Casino Data Migration
 * FLOW NAME         :     Casino_ErrorReprocess
 * MODULE NAME       :     ProcessErrors
 * Description       :     This module logs errors.
 * ------------------------------------------------------------------------------------
 *  ***********                      MODIFICATION HISTORY                     *********
 * ------------------------------------------------------------------------------------
 * Current Team Revision: $Revision$    

 * VERSION  CRNUM       DATE       Author        Descr of Revision
 * 1.0               04/03/2017   Prolifics      Initial version
 * 1.1        
 * 1.2        
 * ------------------------------------------------------------------------------------*/
CREATE COMPUTE MODULE ProcessErrors
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE rEnv REFERENCE TO Environment.Variables;
		DECLARE rExcp REFERENCE TO InputExceptionList;
		DECLARE cLocalTranId CHARACTER COALESCE(InputRoot.MQMD.MsgId, UUIDASCHAR);
		
		SET cLocalTranId = TRANSLATE(cLocalTranId, 'X''', '');
		
		IF NOT EXISTS(Environment.Variables[]) THEN 
			CREATE FIELD Environment.Variables AS rEnv;
		END IF;

		IF NOT EXISTS(rEnv.GTM.LogEvent[]) THEN
			CALL com.ncl.iib.log.CreateAuditLogEvent(rEnv, cLocalTranId, '', '');
		END IF;

		IF NOT EXISTS(rEnv.ErrorSummary[]) THEN
			CALL com.ncl.iib.utils.getExceptionSummary(rEnv, rExcp);
		END IF;
		
		SET OutputRoot = InputRoot;
		
		RETURN TRUE;
	END;
END MODULE;


/* ------------------------------------------------------------------------------------
 *  ***********                            OWNER                              *********
 * ------------------------------------------------------------------------------------
 * COMPANY           :     NCL
 * PROJECT           :     Casino Data Migration
 * FLOW NAME         :     Casino_ErrorReprocess
 * MODULE NAME       :     UpdateError
 * Description       :     This module captures and update error in usr header.
 * ------------------------------------------------------------------------------------
 *  ***********                      MODIFICATION HISTORY                     *********
 * ------------------------------------------------------------------------------------
 * Current Team Revision: $Revision$    

 * VERSION  CRNUM       DATE       Author        Descr of Revision
 * 1.0               04/03/2017   Prolifics      Initial version
 * 1.1        
 * 1.2        
 * ------------------------------------------------------------------------------------*/
CREATE COMPUTE MODULE UpdateError
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN		
		DECLARE rExcpList REFERENCE TO InputExceptionList;
		DECLARE rEnv REFERENCE TO Environment.Variables;
		
		IF NOT EXISTS(Environment.Variables[]) THEN 
			CREATE FIELD Environment.Variables AS rEnv;
		END IF;
		
		-- extract error details to create error summary
		CALL com.ncl.iib.utils.getExceptionSummary(rEnv, rExcpList);

		SET OutputRoot = InputRoot;
		SET OutputRoot.MQRFH2.usr.PoisonExceptionType = rEnv.ErrorSummary.ExceptionType;
		SET OutputRoot.MQRFH2.usr.PoisonErrorText = rEnv.ErrorSummary.ErrorText;
		
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = PoisonQueue;
		
		DELETE FIELD OutputRoot.MQRFH2.mcd;		
		PROPAGATE FINALIZE NONE;
		
		RETURN FALSE;
	END;
END MODULE;
