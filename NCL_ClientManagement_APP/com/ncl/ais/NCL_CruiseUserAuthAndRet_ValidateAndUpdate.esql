BROKER SCHEMA com.ncl.ais


/* ------------------------------------------------------------------------------------
 *  ***********                            OWNER                              *********
 * ------------------------------------------------------------------------------------
 * COMPANY           :     Norwegian Cruise Line
 * PROJECT           :     WESB-AIS Migration
 * FLOW NAME         :     NCL_CruiseUserAuthenticationAndRetrieve
 * MODULE NAME       :     ValidateAndUpdate
 * Description       :     This module validate and update Client details from Seaware database
 * ------------------------------------------------------------------------------------
 *  ***********                      MODIFICATION HISTORY                     *********
 * ------------------------------------------------------------------------------------
 * Current Team Revision: $Revision$    

 * VERSION  CRNUM       DATE       Author        Descr of Revision
 * 1.0               11/03/2017   Prolifics      Initial version
 * 1.1        
 * ------------------------------------------------------------------------------------*/
 
CREATE COMPUTE MODULE NCL_CruiseUserAuthAndRet_ValidateAndUpdate
	
		CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE rEnv REFERENCE TO Environment.Variables;
		CREATE FIELD Environment.Variables AS rEnv;		
		DECLARE p_Type,p_UserName,p_Password,p_errorCode,dbWebPassword CHARACTER;				
		CREATE LASTCHILD OF rEnv DOMAIN 'XMLNSC' NAME 'XMLNSC';
		DECLARE rInAuthRet REFERENCE TO InputRoot.XMLNSC.*:NCL_CruiseUserAuthenticationAndRetrieveRQ;
		DECLARE formattedlogId CHARACTER;
		
		
		-- Declare Variables for the Logging framework.
		DECLARE cLocalTranId CHARACTER InputRoot.MQMD.MsgId;
		SET cLocalTranId = SUBSTRING(REPLACE(cLocalTranId, '''', '') FROM 2);
		
		-- Calling the Logging framework to log the initial request with the payload.
		CALL com.ncl.iib.log.CreateAuditLogEvent(rEnv, cLocalTranId, '', '');
		
		IF (LogPayLoad) THEN
			
			CREATE LASTCHILD OF rEnv DOMAIN 'XMLNSC' NAME 'LogRequest';
			SET rEnv.LogRequest.Message = InputRoot.XMLNSC;
			SET rEnv.LogRequest.Message.*:NCL_CruiseUserAuthenticationAndRetrieveRQ.*:UserLogin.(XMLNSC.Attribute)Password = 'XXXXXXXX';
			DECLARE bPayload BLOB ASBITSTREAM(rEnv.LogRequest.Message CCSID 1208 ENCODING 546);
			CALL com.ncl.iib.log.AddPayloadLogEvent(bPayload, NodeLabel, 'User Authentication and retrieve request message', 'xml', rEnv);
			
		END IF;
		
		-- Uncomment below block once GTM is finalized
		CALL com.ncl.iib.log.CreateMetaDataSet(COALESCE(rInAuthRet.*:POS.*:Source.*:RequestorID.(XMLNSC.Attribute)ID, COALESCE(rInAuthRet.*:POS.*:Source.PseudoCityCode, '')),
            COALESCE(rInAuthRet.*:POS.*:Source.*:BookingChannel.*:CompanyName.(XMLNSC.Attribute)Code, ''),
            '',
            '',
            '',
             rEnv);
		SET rEnv.cLocalTranId = cLocalTranId;
		SET rEnv.XMLNSC = InputRoot.XMLNSC;		
		
		
--		SET formattedlogId = CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyyMMddHHmmssSS');
--		SET formattedlogId = formattedlogId || 'UATCLIREQ' || InputRoot.XMLNSC.*:NCL_CruiseUserAuthenticationAndRetrieveRQ.TransactionIdentifier || '123456789012345678901234567890';
--		SET rEnv.logId = SUBSTRING(formattedlogId FROM 0 FOR 50);		
		SET rEnv.MQMD = InputRoot.MQMD;
		SET rEnv.MQMD.Expiry = MSG_EXPIRY;
		IF COALESCE(InputRoot.MQMD.ReplyToQ,'')='' THEN
		 SET rEnv.MQMD.ReplyToQ = DEFAULT_REPLYQ;
		END IF;
		-- Form a soap request to call encrypt_decrypt service
		
		-- add audit trail
  		CALL com.ncl.iib.log.AddLogEvent(NodeLabel, 'Invoking Encrypt Decrypt Service...', rEnv);		
	
		SET p_Type = rEnv.XMLNSC.*:NCL_CruiseUserAuthenticationAndRetrieveRQ.*:UserLogin.(XMLNSC.Attribute)UserType;
		SET p_UserName = UPPER(rEnv.XMLNSC.*:NCL_CruiseUserAuthenticationAndRetrieveRQ.*:UserLogin.(XMLNSC.Attribute)UserLoginName);		
		SET p_Password = rEnv.XMLNSC.*:NCL_CruiseUserAuthenticationAndRetrieveRQ.*:UserLogin.(XMLNSC.Attribute)Password;
		
		SET dbWebPassword = THE(SELECT ITEM A.WEB_PASSWORD FROM Database.CLIENT AS A where A.WEB_LOGIN_NAME=p_UserName AND A.ALLOW_WEB_ACCESS='Y');
		IF validatePassword(p_Password,dbWebPassword) = 'Y' THEN
			SET p_errorCode = '0';
		ELSE
			SET p_errorCode = '9913';
		END IF;
		
		-- Propagate on the basis  of response received from stored proc.
		CASE
			
		WHEN p_errorCode = '0' THEN
			SET rEnv.p_errorCode = p_errorCode;
			IF p_Type = 'CONSUMER' THEN
				SET rEnv.Temp = PASSTHRU('UPDATE SEA.client SET web_last_login = sysdate WHERE WEB_LOGIN_NAME =?' VALUES(p_UserName));
			END IF;
			PROPAGATE TO TERMINAL 'out';
			RETURN FALSE;
		WHEN p_errorCode = '9911' OR p_errorCode = '9912' OR p_errorCode = '9913' OR p_errorCode = '9914' THEN
			SET rEnv.p_errorCode = p_errorCode;
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
		ELSE
			SET rEnv.p_errorCode = p_errorCode;
			PROPAGATE TO TERMINAL 'out2';
			RETURN FALSE;
		END CASE;
		
		
		
	END;

	--proc to call stored proc in db 
	CREATE PROCEDURE updateAndValidateSP(IN p_Type CHARACTER,IN p_UserName CHARACTER,IN p_Password CHARACTER, OUT p_ErrorCode CHARACTER)  
	LANGUAGE DATABASE
--	DYNAMIC RESULT SETS 1
	EXTERNAL NAME "NCLSEA.NCL_WESB_USER_LOOKUP_V2";

	CREATE PROCEDURE createHash(IN cPassword CHARACTER) RETURNS CHARACTER
	LANGUAGE JAVA EXTERNAL NAME "utilities.PasswordHash.createHash";
	
	CREATE PROCEDURE validatePassword(IN cPassword CHARACTER,IN cCorrectHash CHARACTER) RETURNS CHARACTER
	LANGUAGE JAVA EXTERNAL NAME "utilities.PasswordHash.validatePassword";
END MODULE;






/* ------------------------------------------------------------------------------------
 *  ***********                            OWNER                              *********
 * ------------------------------------------------------------------------------------
 * COMPANY           :     Norwegian Cruise Line
 * PROJECT           :     WESB-AIS Migration
 * FLOW NAME         :     NCL_CruiseUserAuthenticationAndRetrieve
 * MODULE NAME       :     CallRetClient
 * Description       :     This module creates the request for the retrieve client flow.
 * ------------------------------------------------------------------------------------
 *  ***********                      MODIFICATION HISTORY                     *********
 * ------------------------------------------------------------------------------------
 * Current Team Revision: $Revision$    

 * VERSION  CRNUM       DATE       Author        Descr of Revision
 * 1.0               11/03/2017   Prolifics      Initial version
 * 1.1        
 * ------------------------------------------------------------------------------------*/

CREATE COMPUTE MODULE NCL_CruiseUserAuthAndRet_CallRetClient
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		DECLARE rEnv REFERENCE TO Environment.Variables;
		CREATE FIELD Environment.Variables AS rEnv;
		DECLARE rEnvReq REFERENCE TO Environment.Variables.XMLNSC.*:NCL_CruiseUserAuthenticationAndRetrieveRQ;
		--SET OutputRoot.MQMD = rEnv.MQMD;
		--SET OutputRoot.MQMD.Format = MQFMT_STRING;
		
		-- add audit trail
  		CALL com.ncl.iib.log.AddLogEvent(NodeLabel, 'Invoking Retrieve Client...', rEnv);
  		
		DECLARE rOut REFERENCE TO OutputRoot.XMLNSC.ns2:NCL_CruiseRetrieveClientRQ;
		CREATE FIELD OutputRoot.XMLNSC.ns2:NCL_CruiseRetrieveClientRQ AS rOut;
		
		-- Create a request for the Retrieve client flow.
		SET rOut.(XMLNSC.Attribute)AltLangID = rEnvReq.(XMLNSC.Attribute)AltLangID;
		SET rOut.(XMLNSC.Attribute)EchoToken = rEnvReq.(XMLNSC.Attribute)EchoToken;
		SET rOut.(XMLNSC.Attribute)PrimaryLangID = rEnvReq.(XMLNSC.Attribute)PrimaryLangID;
		SET rOut.(XMLNSC.Attribute)RetransmissionIndicator = rEnvReq.(XMLNSC.Attribute)RetransmissionIndicator;
		SET rOut.(XMLNSC.Attribute)SequenceNmbr = rEnvReq.(XMLNSC.Attribute)SequenceNmbr;
		SET rOut.(XMLNSC.Attribute)Target = rEnvReq.(XMLNSC.Attribute)Target;
		SET rOut.(XMLNSC.Attribute)TimeStamp = rEnvReq.(XMLNSC.Attribute)TimeStamp;
		SET rOut.(XMLNSC.Attribute)TransactionIdentifier = rEnvReq.(XMLNSC.Attribute)TransactionIdentifier;
		SET rOut.(XMLNSC.Attribute)TransactionStatusCode = rEnvReq.(XMLNSC.Attribute)TransactionStatusCode;
		SET rOut.(XMLNSC.Attribute)Version = rEnvReq.(XMLNSC.Attribute)Version;
		SET rOut.ns2:POS.ns2:Source.(XMLNSC.Attribute)AgentDutyCode = rEnvReq.*:POS.*:Source.(XMLNSC.Attribute)AgentDutyCode;
		SET rOut.ns2:POS.ns2:Source.(XMLNSC.Attribute)AgentSine = rEnvReq.*:POS.*:Source.(XMLNSC.Attribute)AgentSine;
		SET rOut.ns2:POS.ns2:Source.(XMLNSC.Attribute)AirlineVendorID = rEnvReq.*:POS.*:Source.(XMLNSC.Attribute)AirlineVendorId;
		SET rOut.ns2:POS.ns2:Source.(XMLNSC.Attribute)AirportCode = rEnvReq.*:POS.*:Source.(XMLNSC.Attribute)AirportCode;
		SET rOut.ns2:POS.ns2:Source.(XMLNSC.Attribute)ERSP_UserID = rEnvReq.*:POS.*:Source.(XMLNSC.Attribute)ERSP_UserId;
		SET rOut.ns2:POS.ns2:Source.(XMLNSC.Attribute)FirstDepartPoint = rEnvReq.*:POS.*:Source.(XMLNSC.Attribute)FirstDepartPoint;
		SET rOut.ns2:POS.ns2:Source.(XMLNSC.Attribute)ISOCountry = rEnvReq.*:POS.*:Source.(XMLNSC.Attribute)ISOCountry;
		SET rOut.ns2:POS.ns2:Source.(XMLNSC.Attribute)ISOCurrency = rEnvReq.*:POS.*:Source.(XMLNSC.Attribute)ISOCurrency;
		SET rOut.ns2:POS.ns2:Source.(XMLNSC.Attribute)PseudoCityCode = rEnvReq.*:POS.*:Source.(XMLNSC.Attribute)PseudoCityCode;
		SET rOut.ns2:POS.ns2:Source.(XMLNSC.Attribute)TerminalID = rEnvReq.*:POS.*:Source.(XMLNSC.Attribute)TerminalID;
		SET rOut.ns2:POS.ns2:Source.ns2:RequestorID.(XMLNSC.Attribute)ID = rEnvReq.*:POS.*:Source.*:RequestorID.(XMLNSC.Attribute)ID;
		SET rOut.ns2:POS.ns2:Source.ns2:RequestorID.(XMLNSC.Attribute)ID_Context = rEnvReq.*:POS.*:Source.*:RequestorID.(XMLNSC.Attribute)ID_Context;
		SET rOut.ns2:POS.ns2:Source.ns2:RequestorID.(XMLNSC.Attribute)Instance = rEnvReq.*:POS.*:Source.*:RequestorID.(XMLNSC.Attribute)Instance;
		SET rOut.ns2:POS.ns2:Source.ns2:RequestorID.(XMLNSC.Attribute)Type = rEnvReq.*:POS.*:Source.*:RequestorID.(XMLNSC.Attribute)Type;
		SET rOut.ns2:POS.ns2:Source.ns2:RequestorID.(XMLNSC.Attribute)URL = rEnvReq.*:POS.*:Source.*:RequestorID.(XMLNSC.Attribute)URL;
		SET rOut.ns2:POS.ns2:Source.ns2:RequestorID.(XMLNSC.Attribute)MessagePassword = rEnvReq.*:POS.*:Source.*:RequestorID.(XMLNSC.Attribute)MessagePassword;
		SET rOut.ns2:POS.ns2:Source.ns2:RequestorID.ns2:CompanyName.(XMLNSC.Attribute)Code = rEnvReq.*:POS.*:Source.*:RequestorID.*:CompanyName.(XMLNSC.Attribute)Code;
		SET rOut.ns2:POS.ns2:Source.ns2:RequestorID.ns2:CompanyName.(XMLNSC.Attribute)CodeContext = rEnvReq.*:POS.*:Source.*:RequestorID.*:CompanyName.(XMLNSC.Attribute)CodeContext;
		SET rOut.ns2:POS.ns2:Source.ns2:RequestorID.ns2:CompanyName.(XMLNSC.Attribute)CompanyShortName = rEnvReq.*:POS.*:Source.*:RequestorID.*:CompanyName.(XMLNSC.Attribute)CompanyShortName;
		SET rOut.ns2:POS.ns2:Source.ns2:RequestorID.ns2:CompanyName.(XMLNSC.Attribute)TravelSector = rEnvReq.*:POS.*:Source.*:RequestorID.*:CompanyName.(XMLNSC.Attribute)TravelSector;
		SET rOut.ns2:POS.ns2:Source.ns2:RequestorID.ns2:CompanyName = rEnvReq.*:POS.*:Source.*:RequestorID.*:CompanyName;
		SET rOut.ns2:POS.ns2:Source.ns2:Position.(XMLNSC.Attribute)Altitude = rEnvReq.*:POS.*:Source.*:Position.(XMLNSC.Attribute)Altitude;
		SET rOut.ns2:POS.ns2:Source.ns2:Position.(XMLNSC.Attribute)AltitudeUnitOfMeasureCode = rEnvReq.*:POS.*:Source.*:Position.(XMLNSC.Attribute)AltitudeUnitOfMeasureCode;
		SET rOut.ns2:POS.ns2:Source.ns2:Position.(XMLNSC.Attribute)Latitude = rEnvReq.*:POS.*:Source.*:Position.(XMLNSC.Attribute)Latitude;
		SET rOut.ns2:POS.ns2:Source.ns2:Position.(XMLNSC.Attribute)Longitude = rEnvReq.*:POS.*:Source.*:Position.(XMLNSC.Attribute)Longitude;
		SET rOut.ns2:POS.ns2:Source.ns2:BookingChannel.(XMLNSC.Attribute)Primary = rEnvReq.*:POS.*:Source.*:BookingChannel.(XMLNSC.Attribute)Primary;
		SET rOut.ns2:POS.ns2:Source.ns2:BookingChannel.(XMLNSC.Attribute)Type = rEnvReq.*:POS.*:Source.*:BookingChannel.(XMLNSC.Attribute)Type;
		SET rOut.ns2:POS.ns2:Source.ns2:BookingChannel.ns2:CompanyName.(XMLNSC.Attribute)Code = rEnvReq.*:POS.*:Source.*:BookingChannel.CompanyName.(XMLNSC.Attribute)Code;
		SET rOut.ns2:POS.ns2:Source.ns2:BookingChannel.ns2:CompanyName.(XMLNSC.Attribute)CodeContext = rEnvReq.*:POS.*:Source.*:BookingChannel.CompanyName.(XMLNSC.Attribute)CodeContext;
		SET rOut.ns2:POS.ns2:Source.ns2:BookingChannel.ns2:CompanyName.(XMLNSC.Attribute)CompanyShortName = rEnvReq.*:POS.*:Source.*:BookingChannel.CompanyName.(XMLNSC.Attribute)CompanyShortName;
		SET rOut.ns2:POS.ns2:Source.ns2:BookingChannel.ns2:CompanyName.(XMLNSC.Attribute)TravelSector = rEnvReq.*:POS.*:Source.*:BookingChannel.CompanyName.(XMLNSC.Attribute)ravelSector;
		SET rOut.ns2:POS.ns2:Source.ns2:BookingChannel.ns2:CompanyName = rEnvReq.*:POS.*:Source.*:BookingChannel.*:CompanyName;
		SET rOut.ns2:UserLogin.(XMLNSC.Attribute)UserLoginName = rEnvReq.*:UserLogin.(XMLNSC.Attribute)UserLoginName;
		SET rOut.ns2:IncludeNative = rEnvReq.*:IncludeNative;
		
		
		
		RETURN TRUE;
	END;

END MODULE;





/* ------------------------------------------------------------------------------------
 *  ***********                            OWNER                              *********
 * ------------------------------------------------------------------------------------
 * COMPANY           :     Norwegian Cruise Line
 * PROJECT           :     WESB-AIS Migration
 * FLOW NAME         :     NCL_CruiseUserAuthenticationAndRetrieve
 * MODULE NAME       :     MatchCorrelation
 * Description       :     This module stores the correlation id along with the message headers.
 * ------------------------------------------------------------------------------------
 *  ***********                      MODIFICATION HISTORY                     *********
 * ------------------------------------------------------------------------------------
 * Current Team Revision: $Revision$    

 * VERSION  CRNUM       DATE       Author        Descr of Revision
 * 1.0               11/03/2017   Prolifics      Initial version
 * 1.1        
 * ------------------------------------------------------------------------------------*/

CREATE COMPUTE MODULE NCL_CruiseUserAuthAndRet_MatchCorrelation
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		SET OutputRoot.MQMD.CorrelId = InputLocalEnvironment.WrittenDestination.MQ.DestinationData.msgId;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
END MODULE;

